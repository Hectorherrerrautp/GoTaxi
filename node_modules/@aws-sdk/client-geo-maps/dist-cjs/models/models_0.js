"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTileRequestFilterSensitiveLog = exports.GetStyleDescriptorRequestFilterSensitiveLog = exports.GetStaticMapRequestFilterSensitiveLog = exports.ValidationException = exports.ValidationExceptionReason = exports.ThrottlingException = exports.InternalServerException = exports.StaticMapStyle = exports.ScaleBarUnit = exports.MapFeatureMode = exports.LabelSize = exports.Variant = exports.MapStyle = exports.ColorScheme = exports.AccessDeniedException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const GeoMapsServiceException_1 = require("./GeoMapsServiceException");
class AccessDeniedException extends GeoMapsServiceException_1.GeoMapsServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.ColorScheme = {
    DARK: "Dark",
    LIGHT: "Light",
};
exports.MapStyle = {
    HYBRID: "Hybrid",
    MONOCHROME: "Monochrome",
    SATELLITE: "Satellite",
    STANDARD: "Standard",
};
exports.Variant = {
    DEFAULT: "Default",
};
exports.LabelSize = {
    LARGE: "Large",
    SMALL: "Small",
};
exports.MapFeatureMode = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
exports.ScaleBarUnit = {
    KILOMETERS: "Kilometers",
    KILOMETERS_MILES: "KilometersMiles",
    MILES: "Miles",
    MILES_KILOMETERS: "MilesKilometers",
};
exports.StaticMapStyle = {
    SATELLITE: "Satellite",
    STANDARD: "Standard",
};
class InternalServerException extends GeoMapsServiceException_1.GeoMapsServiceException {
    name = "InternalServerException";
    $fault = "server";
    $retryable = {};
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
class ThrottlingException extends GeoMapsServiceException_1.GeoMapsServiceException {
    name = "ThrottlingException";
    $fault = "client";
    $retryable = {};
    Message;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
exports.ThrottlingException = ThrottlingException;
exports.ValidationExceptionReason = {
    CANNOT_PARSE: "CannotParse",
    FIELD_VALIDATION_FAILED: "FieldValidationFailed",
    MISSING: "Missing",
    OTHER: "Other",
    UNKNOWN_FIELD: "UnknownField",
    UNKNOWN_OPERATION: "UnknownOperation",
};
class ValidationException extends GeoMapsServiceException_1.GeoMapsServiceException {
    name = "ValidationException";
    $fault = "client";
    Message;
    Reason;
    FieldList;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.FieldList = opts.FieldList;
    }
}
exports.ValidationException = ValidationException;
const GetStaticMapRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetStaticMapRequestFilterSensitiveLog = GetStaticMapRequestFilterSensitiveLog;
const GetStyleDescriptorRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetStyleDescriptorRequestFilterSensitiveLog = GetStyleDescriptorRequestFilterSensitiveLog;
const GetTileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetTileRequestFilterSensitiveLog = GetTileRequestFilterSensitiveLog;
