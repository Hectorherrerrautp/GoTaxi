"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_GetTileCommand = exports.de_GetStyleDescriptorCommand = exports.de_GetStaticMapCommand = exports.de_GetSpritesCommand = exports.de_GetGlyphsCommand = exports.se_GetTileCommand = exports.se_GetStyleDescriptorCommand = exports.se_GetStaticMapCommand = exports.se_GetSpritesCommand = exports.se_GetGlyphsCommand = void 0;
const core_1 = require("@aws-sdk/core");
const core_2 = require("@smithy/core");
const smithy_client_1 = require("@smithy/smithy-client");
const GeoMapsServiceException_1 = require("../models/GeoMapsServiceException");
const models_0_1 = require("../models/models_0");
const se_GetGlyphsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/glyphs/{FontStack}/{FontUnicodeRange}");
    b.p("FontStack", () => input.FontStack, "{FontStack}", false);
    b.p("FontUnicodeRange", () => input.FontUnicodeRange, "{FontUnicodeRange}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetGlyphsCommand = se_GetGlyphsCommand;
const se_GetSpritesCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/styles/{Style}/{ColorScheme}/{Variant}/sprites/{FileName}");
    b.p("FileName", () => input.FileName, "{FileName}", false);
    b.p("Style", () => input.Style, "{Style}", false);
    b.p("ColorScheme", () => input.ColorScheme, "{ColorScheme}", false);
    b.p("Variant", () => input.Variant, "{Variant}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetSpritesCommand = se_GetSpritesCommand;
const se_GetStaticMapCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/static/{FileName}");
    b.p("FileName", () => input.FileName, "{FileName}", false);
    const query = (0, smithy_client_1.map)({
        [_bb]: [, input[_BB]],
        [_bp]: [, input[_BP]],
        [_c]: [, input[_C]],
        [_cs]: [, input[_CS]],
        [_co]: [, input[_CO]],
        [_cl]: [() => input.CropLabels !== void 0, () => input[_CL].toString()],
        [_go]: [, input[_GJO]],
        [_h]: [(0, smithy_client_1.expectNonNull)(input.Height, `Height`) != null, () => input[_H].toString()],
        [_k]: [, input[_K]],
        [_ls]: [, input[_LS]],
        [_l]: [, input[_L]],
        [_p]: [() => input.Padding !== void 0, () => input[_P].toString()],
        [_pv]: [, input[_PV]],
        [_po]: [, input[_POI]],
        [_r]: [() => input.Radius !== void 0, () => input[_R].toString()],
        [_su]: [, input[_SBU]],
        [_s]: [, input[_S]],
        [_w]: [(0, smithy_client_1.expectNonNull)(input.Width, `Width`) != null, () => input[_W].toString()],
        [_z]: [() => input.Zoom !== void 0, () => (input[_Z] % 1 == 0 ? input[_Z] + ".0" : input[_Z].toString())],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_GetStaticMapCommand = se_GetStaticMapCommand;
const se_GetStyleDescriptorCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/styles/{Style}/descriptor");
    b.p("Style", () => input.Style, "{Style}", false);
    const query = (0, smithy_client_1.map)({
        [_cs]: [, input[_CS]],
        [_pv]: [, input[_PV]],
        [_k]: [, input[_K]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_GetStyleDescriptorCommand = se_GetStyleDescriptorCommand;
const se_GetTileCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/tiles/{Tileset}/{Z}/{X}/{Y}");
    b.p("Tileset", () => input.Tileset, "{Tileset}", false);
    b.p("Z", () => input.Z, "{Z}", false);
    b.p("X", () => input.X, "{X}", false);
    b.p("Y", () => input.Y, "{Y}", false);
    const query = (0, smithy_client_1.map)({
        [_k]: [, input[_K]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_GetTileCommand = se_GetTileCommand;
const de_GetGlyphsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
        [_CC]: [, output.headers[_cc]],
        [_ET]: [, output.headers[_e]],
    });
    const data = await (0, smithy_client_1.collectBody)(output.body, context);
    contents.Blob = data;
    return contents;
};
exports.de_GetGlyphsCommand = de_GetGlyphsCommand;
const de_GetSpritesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
        [_CC]: [, output.headers[_cc]],
        [_ET]: [, output.headers[_e]],
    });
    const data = await (0, smithy_client_1.collectBody)(output.body, context);
    contents.Blob = data;
    return contents;
};
exports.de_GetSpritesCommand = de_GetSpritesCommand;
const de_GetStaticMapCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
        [_CC]: [, output.headers[_cc]],
        [_ET]: [, output.headers[_e]],
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = await (0, smithy_client_1.collectBody)(output.body, context);
    contents.Blob = data;
    return contents;
};
exports.de_GetStaticMapCommand = de_GetStaticMapCommand;
const de_GetStyleDescriptorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
        [_CC]: [, output.headers[_cc]],
        [_ET]: [, output.headers[_e]],
    });
    const data = await (0, smithy_client_1.collectBody)(output.body, context);
    contents.Blob = data;
    return contents;
};
exports.de_GetStyleDescriptorCommand = de_GetStyleDescriptorCommand;
const de_GetTileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
        [_CC]: [, output.headers[_cc]],
        [_ET]: [, output.headers[_e]],
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = await (0, smithy_client_1.collectBody)(output.body, context);
    contents.Blob = data;
    return contents;
};
exports.de_GetTileCommand = de_GetTileCommand;
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await (0, core_1.parseJsonErrorBody)(output.body, context),
    };
    const errorCode = (0, core_1.loadRestJsonErrorCode)(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.geomaps#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.geomaps#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.geomaps#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.geomaps#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = (0, smithy_client_1.withBaseException)(GeoMapsServiceException_1.GeoMapsServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Message: [, smithy_client_1.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Message: [, smithy_client_1.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Message: [, smithy_client_1.expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        FieldList: [, (_) => de_ValidationExceptionFieldList(_, context), `fieldList`],
        Message: [, smithy_client_1.expectString, `message`],
        Reason: [, smithy_client_1.expectString, `reason`],
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ValidationExceptionField = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Message: [, smithy_client_1.expectString, `message`],
        Name: [, smithy_client_1.expectString, `name`],
    });
};
const de_ValidationExceptionFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationExceptionField(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const _BB = "BoundingBox";
const _BP = "BoundedPositions";
const _C = "Center";
const _CC = "CacheControl";
const _CL = "CropLabels";
const _CO = "CompactOverlay";
const _CS = "ColorScheme";
const _CT = "ContentType";
const _ET = "ETag";
const _GJO = "GeoJsonOverlay";
const _H = "Height";
const _K = "Key";
const _L = "Language";
const _LS = "LabelSize";
const _P = "Padding";
const _PB = "PricingBucket";
const _POI = "PointsOfInterests";
const _PV = "PoliticalView";
const _R = "Radius";
const _S = "Style";
const _SBU = "ScaleBarUnit";
const _W = "Width";
const _Z = "Zoom";
const _bb = "bounding-box";
const _bp = "bounded-positions";
const _c = "center";
const _cc = "cache-control";
const _cl = "crop-labels";
const _co = "compact-overlay";
const _cs = "color-scheme";
const _ct = "content-type";
const _e = "etag";
const _go = "geojson-overlay";
const _h = "height";
const _k = "key";
const _l = "lang";
const _ls = "label-size";
const _p = "padding";
const _po = "pois";
const _pv = "political-view";
const _r = "radius";
const _s = "style";
const _su = "scale-unit";
const _w = "width";
const _xagpb = "x-amz-geo-pricing-bucket";
const _z = "zoom";
