"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteVehicleIncidentType = exports.RouteVehicleIncidentSeverity = exports.RouteLegType = exports.RouteLegTravelMode = exports.RoutePedestrianTravelStepType = exports.RouteTurnIntensity = exports.RouteSteeringDirection = exports.RouteRoadType = exports.RouteDirection = exports.RouteSpanRoadAttribute = exports.RouteSpanPedestrianAccessAttribute = exports.RoutePedestrianNoticeCode = exports.RouteSideOfStreet = exports.RouteFerryTravelStepType = exports.RouteFerryNoticeCode = exports.RouteFerryBeforeTravelStepType = exports.RouteFerryAfterTravelStepType = exports.RouteNoticeImpact = exports.RouteResponseNoticeCode = exports.RouteTravelStepType = exports.RouteTruckType = exports.RouteHazardousCargoType = exports.RouteEngineType = exports.RouteTravelMode = exports.RouteTollVehicleCategory = exports.RouteSpanAdditionalFeature = exports.RouteLegAdditionalFeature = exports.MeasurementSystem = exports.RouteZoneCategory = exports.RouteMatrixErrorCode = exports.RouteMatrixTruckType = exports.RouteMatrixHazardousCargoType = exports.RouteMatrixTravelMode = exports.RouteMatrixZoneCategory = exports.ValidationException = exports.ValidationExceptionReason = exports.ThrottlingException = exports.InternalServerException = exports.IsolineTruckType = exports.IsolineHazardousCargoType = exports.IsolineEngineType = exports.IsolineTravelMode = exports.TrafficUsage = exports.RoutingObjective = exports.IsolineOptimizationObjective = exports.GeometryFormat = exports.SideOfStreetMatchingStrategy = exports.MatchingStrategy = exports.IsolineZoneCategory = exports.AccessDeniedException = void 0;
exports.CalculateRouteMatrixResponseFilterSensitiveLog = exports.CalculateRouteMatrixRequestFilterSensitiveLog = exports.RouteMatrixBoundaryFilterSensitiveLog = exports.RouteMatrixBoundaryGeometryFilterSensitiveLog = exports.CircleFilterSensitiveLog = exports.RouteMatrixOriginFilterSensitiveLog = exports.RouteMatrixOriginOptionsFilterSensitiveLog = exports.RouteMatrixDestinationFilterSensitiveLog = exports.RouteMatrixDestinationOptionsFilterSensitiveLog = exports.RouteMatrixSideOfStreetOptionsFilterSensitiveLog = exports.RouteMatrixMatchingOptionsFilterSensitiveLog = exports.RouteMatrixAvoidanceOptionsFilterSensitiveLog = exports.RouteMatrixAvoidanceAreaFilterSensitiveLog = exports.RouteMatrixAvoidanceAreaGeometryFilterSensitiveLog = exports.CalculateIsolinesResponseFilterSensitiveLog = exports.IsolineFilterSensitiveLog = exports.IsolineShapeGeometryFilterSensitiveLog = exports.IsolineConnectionFilterSensitiveLog = exports.IsolineConnectionGeometryFilterSensitiveLog = exports.CalculateIsolinesRequestFilterSensitiveLog = exports.IsolineOriginOptionsFilterSensitiveLog = exports.IsolineDestinationOptionsFilterSensitiveLog = exports.IsolineSideOfStreetOptionsFilterSensitiveLog = exports.IsolineMatchingOptionsFilterSensitiveLog = exports.IsolineAvoidanceOptionsFilterSensitiveLog = exports.IsolineAvoidanceAreaFilterSensitiveLog = exports.IsolineAvoidanceAreaGeometryFilterSensitiveLog = exports.PolylineCorridorFilterSensitiveLog = exports.CorridorFilterSensitiveLog = exports.RoadSnapNoticeCode = exports.RoadSnapHazardousCargoType = exports.RoadSnapTravelMode = exports.WaypointOptimizationConstraint = exports.WaypointOptimizationTruckType = exports.WaypointOptimizationHazardousCargoType = exports.WaypointOptimizationTravelMode = exports.WaypointOptimizationSequencingObjective = exports.WaypointOptimizationServiceTimeTreatment = exports.WaypointOptimizationClusteringAlgorithm = exports.DayOfWeek = exports.RouteVehicleTravelStepType = exports.RouteTollPaymentMethod = exports.RouteTollPassValidityPeriodType = exports.RouteSpanTruckAccessAttribute = exports.RouteSpanScooterAccessAttribute = exports.RouteSpanRailwayCrossingAttribute = exports.RouteSpanGateAttribute = exports.RouteSpanCarAccessAttribute = exports.RouteWeightConstraintType = exports.RouteVehicleNoticeCode = void 0;
exports.SnapToRoadsResponseFilterSensitiveLog = exports.RoadSnapSnappedTracePointFilterSensitiveLog = exports.RoadSnapSnappedGeometryFilterSensitiveLog = exports.SnapToRoadsRequestFilterSensitiveLog = exports.RoadSnapTracePointFilterSensitiveLog = exports.OptimizeWaypointsResponseFilterSensitiveLog = exports.WaypointOptimizationOptimizedWaypointFilterSensitiveLog = exports.WaypointOptimizationImpedingWaypointFilterSensitiveLog = exports.OptimizeWaypointsRequestFilterSensitiveLog = exports.WaypointOptimizationWaypointFilterSensitiveLog = exports.WaypointOptimizationDestinationOptionsFilterSensitiveLog = exports.WaypointOptimizationSideOfStreetOptionsFilterSensitiveLog = exports.WaypointOptimizationAvoidanceOptionsFilterSensitiveLog = exports.WaypointOptimizationAvoidanceAreaFilterSensitiveLog = exports.WaypointOptimizationAvoidanceAreaGeometryFilterSensitiveLog = exports.CalculateRoutesResponseFilterSensitiveLog = exports.RouteFilterSensitiveLog = exports.RouteLegFilterSensitiveLog = exports.RouteVehicleLegDetailsFilterSensitiveLog = exports.RouteTollFilterSensitiveLog = exports.RouteTollPaymentSiteFilterSensitiveLog = exports.RouteVehicleDepartureFilterSensitiveLog = exports.RouteVehicleArrivalFilterSensitiveLog = exports.RouteVehiclePlaceFilterSensitiveLog = exports.RoutePedestrianLegDetailsFilterSensitiveLog = exports.RoutePedestrianDepartureFilterSensitiveLog = exports.RoutePedestrianArrivalFilterSensitiveLog = exports.RoutePedestrianPlaceFilterSensitiveLog = exports.RouteLegGeometryFilterSensitiveLog = exports.RouteFerryLegDetailsFilterSensitiveLog = exports.RoutePassThroughWaypointFilterSensitiveLog = exports.RoutePassThroughPlaceFilterSensitiveLog = exports.RouteFerryDepartureFilterSensitiveLog = exports.RouteFerryArrivalFilterSensitiveLog = exports.RouteFerryPlaceFilterSensitiveLog = exports.CalculateRoutesRequestFilterSensitiveLog = exports.RouteWaypointFilterSensitiveLog = exports.RouteOriginOptionsFilterSensitiveLog = exports.RouteDestinationOptionsFilterSensitiveLog = exports.RouteSideOfStreetOptionsFilterSensitiveLog = exports.RouteMatchingOptionsFilterSensitiveLog = exports.RouteAvoidanceOptionsFilterSensitiveLog = exports.RouteAvoidanceAreaFilterSensitiveLog = exports.RouteAvoidanceAreaGeometryFilterSensitiveLog = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const GeoRoutesServiceException_1 = require("./GeoRoutesServiceException");
class AccessDeniedException extends GeoRoutesServiceException_1.GeoRoutesServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.IsolineZoneCategory = {
    CONGESTION_PRICING: "CongestionPricing",
    ENVIRONMENTAL: "Environmental",
    VIGNETTE: "Vignette",
};
exports.MatchingStrategy = {
    MATCH_ANY: "MatchAny",
    MATCH_MOST_SIGNIFICANT_ROAD: "MatchMostSignificantRoad",
};
exports.SideOfStreetMatchingStrategy = {
    ANY_STREET: "AnyStreet",
    DIVIDED_STREET_ONLY: "DividedStreetOnly",
};
exports.GeometryFormat = {
    FLEXIBLE_POLYLINE: "FlexiblePolyline",
    SIMPLE: "Simple",
};
exports.IsolineOptimizationObjective = {
    ACCURATE_CALCULATION: "AccurateCalculation",
    BALANCED_CALCULATION: "BalancedCalculation",
    FAST_CALCULATION: "FastCalculation",
};
exports.RoutingObjective = {
    FASTEST_ROUTE: "FastestRoute",
    SHORTEST_ROUTE: "ShortestRoute",
};
exports.TrafficUsage = {
    IGNORE_TRAFFIC_DATA: "IgnoreTrafficData",
    USE_TRAFFIC_DATA: "UseTrafficData",
};
exports.IsolineTravelMode = {
    CAR: "Car",
    PEDESTRIAN: "Pedestrian",
    SCOOTER: "Scooter",
    TRUCK: "Truck",
};
exports.IsolineEngineType = {
    ELECTRIC: "Electric",
    INTERNAL_COMBUSTION: "InternalCombustion",
    PLUGIN_HYBRID: "PluginHybrid",
};
exports.IsolineHazardousCargoType = {
    COMBUSTIBLE: "Combustible",
    CORROSIVE: "Corrosive",
    EXPLOSIVE: "Explosive",
    FLAMMABLE: "Flammable",
    GAS: "Gas",
    HARMFUL_TO_WATER: "HarmfulToWater",
    ORGANIC: "Organic",
    OTHER: "Other",
    POISON: "Poison",
    POISONOUS_INHALATION: "PoisonousInhalation",
    RADIOACTIVE: "Radioactive",
};
exports.IsolineTruckType = {
    LIGHT_TRUCK: "LightTruck",
    STRAIGHT_TRUCK: "StraightTruck",
    TRACTOR: "Tractor",
};
class InternalServerException extends GeoRoutesServiceException_1.GeoRoutesServiceException {
    name = "InternalServerException";
    $fault = "server";
    $retryable = {};
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
class ThrottlingException extends GeoRoutesServiceException_1.GeoRoutesServiceException {
    name = "ThrottlingException";
    $fault = "client";
    $retryable = {};
    Message;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
exports.ThrottlingException = ThrottlingException;
exports.ValidationExceptionReason = {
    CANNOT_PARSE: "CannotParse",
    FIELD_VALIDATION_FAILED: "FieldValidationFailed",
    MISSING: "Missing",
    OTHER: "Other",
    UNKNOWN_FIELD: "UnknownField",
    UNKNOWN_OPERATION: "UnknownOperation",
};
class ValidationException extends GeoRoutesServiceException_1.GeoRoutesServiceException {
    name = "ValidationException";
    $fault = "client";
    Message;
    Reason;
    FieldList;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.FieldList = opts.FieldList;
    }
}
exports.ValidationException = ValidationException;
exports.RouteMatrixZoneCategory = {
    CONGESTION_PRICING: "CongestionPricing",
    ENVIRONMENTAL: "Environmental",
    VIGNETTE: "Vignette",
};
exports.RouteMatrixTravelMode = {
    CAR: "Car",
    PEDESTRIAN: "Pedestrian",
    SCOOTER: "Scooter",
    TRUCK: "Truck",
};
exports.RouteMatrixHazardousCargoType = {
    COMBUSTIBLE: "Combustible",
    CORROSIVE: "Corrosive",
    EXPLOSIVE: "Explosive",
    FLAMMABLE: "Flammable",
    GAS: "Gas",
    HARMFUL_TO_WATER: "HarmfulToWater",
    ORGANIC: "Organic",
    OTHER: "Other",
    POISON: "Poison",
    POISONOUS_INHALATION: "PoisonousInhalation",
    RADIOACTIVE: "Radioactive",
};
exports.RouteMatrixTruckType = {
    LIGHT_TRUCK: "LightTruck",
    STRAIGHT_TRUCK: "StraightTruck",
    TRACTOR: "Tractor",
};
exports.RouteMatrixErrorCode = {
    NO_MATCH: "NoMatch",
    NO_MATCH_DESTINATION: "NoMatchDestination",
    NO_MATCH_ORIGIN: "NoMatchOrigin",
    NO_ROUTE: "NoRoute",
    OTHER: "Other",
    OUT_OF_BOUNDS: "OutOfBounds",
    OUT_OF_BOUNDS_DESTINATION: "OutOfBoundsDestination",
    OUT_OF_BOUNDS_ORIGIN: "OutOfBoundsOrigin",
    VIOLATION: "Violation",
};
exports.RouteZoneCategory = {
    CONGESTION_PRICING: "CongestionPricing",
    ENVIRONMENTAL: "Environmental",
    VIGNETTE: "Vignette",
};
exports.MeasurementSystem = {
    IMPERIAL: "Imperial",
    METRIC: "Metric",
};
exports.RouteLegAdditionalFeature = {
    ELEVATION: "Elevation",
    INCIDENTS: "Incidents",
    PASS_THROUGH_WAYPOINTS: "PassThroughWaypoints",
    SUMMARY: "Summary",
    TOLLS: "Tolls",
    TRAVEL_STEP_INSTRUCTIONS: "TravelStepInstructions",
    TRUCK_ROAD_TYPES: "TruckRoadTypes",
    TYPICAL_DURATION: "TypicalDuration",
    ZONES: "Zones",
};
exports.RouteSpanAdditionalFeature = {
    BEST_CASE_DURATION: "BestCaseDuration",
    CAR_ACCESS: "CarAccess",
    CONSUMPTION: "Consumption",
    COUNTRY: "Country",
    DISTANCE: "Distance",
    DURATION: "Duration",
    DYNAMIC_SPEED: "DynamicSpeed",
    FUNCTIONAL_CLASSIFICATION: "FunctionalClassification",
    GATES: "Gates",
    INCIDENTS: "Incidents",
    NAMES: "Names",
    NOTICES: "Notices",
    PEDESTRIAN_ACCESS: "PedestrianAccess",
    RAILWAY_CROSSINGS: "RailwayCrossings",
    REGION: "Region",
    ROAD_ATTRIBUTES: "RoadAttributes",
    ROUTE_NUMBERS: "RouteNumbers",
    SCOOTER_ACCESS: "ScooterAccess",
    SPEED_LIMIT: "SpeedLimit",
    TOLL_SYSTEMS: "TollSystems",
    TRUCK_ACCESS: "TruckAccess",
    TRUCK_ROAD_TYPES: "TruckRoadTypes",
    TYPICAL_DURATION: "TypicalDuration",
    ZONES: "Zones",
};
exports.RouteTollVehicleCategory = {
    MINIBUS: "Minibus",
};
exports.RouteTravelMode = {
    CAR: "Car",
    PEDESTRIAN: "Pedestrian",
    SCOOTER: "Scooter",
    TRUCK: "Truck",
};
exports.RouteEngineType = {
    ELECTRIC: "Electric",
    INTERNAL_COMBUSTION: "InternalCombustion",
    PLUGIN_HYBRID: "PluginHybrid",
};
exports.RouteHazardousCargoType = {
    COMBUSTIBLE: "Combustible",
    CORROSIVE: "Corrosive",
    EXPLOSIVE: "Explosive",
    FLAMMABLE: "Flammable",
    GAS: "Gas",
    HARMFUL_TO_WATER: "HarmfulToWater",
    ORGANIC: "Organic",
    OTHER: "Other",
    POISON: "Poison",
    POISONOUS_INHALATION: "PoisonousInhalation",
    RADIOACTIVE: "Radioactive",
};
exports.RouteTruckType = {
    LIGHT_TRUCK: "LightTruck",
    STRAIGHT_TRUCK: "StraightTruck",
    TRACTOR: "Tractor",
};
exports.RouteTravelStepType = {
    DEFAULT: "Default",
    TURN_BY_TURN: "TurnByTurn",
};
exports.RouteResponseNoticeCode = {
    MAIN_LANGUAGE_NOT_FOUND: "MainLanguageNotFound",
    OTHER: "Other",
    TRAVEL_TIME_EXCEEDS_DRIVER_WORK_HOURS: "TravelTimeExceedsDriverWorkHours",
};
exports.RouteNoticeImpact = {
    HIGH: "High",
    LOW: "Low",
};
exports.RouteFerryAfterTravelStepType = {
    DEBOARD: "Deboard",
};
exports.RouteFerryBeforeTravelStepType = {
    BOARD: "Board",
};
exports.RouteFerryNoticeCode = {
    ACCURATE_POLYLINE_UNAVAILABLE: "AccuratePolylineUnavailable",
    NO_SCHEDULE: "NoSchedule",
    OTHER: "Other",
    SEASONAL_CLOSURE: "SeasonalClosure",
    VIOLATED_AVOID_FERRY: "ViolatedAvoidFerry",
    VIOLATED_AVOID_RAIL_FERRY: "ViolatedAvoidRailFerry",
};
exports.RouteFerryTravelStepType = {
    ARRIVE: "Arrive",
    CONTINUE: "Continue",
    DEPART: "Depart",
};
exports.RouteSideOfStreet = {
    LEFT: "Left",
    RIGHT: "Right",
};
exports.RoutePedestrianNoticeCode = {
    ACCURATE_POLYLINE_UNAVAILABLE: "AccuratePolylineUnavailable",
    OTHER: "Other",
    VIOLATED_AVOID_DIRT_ROAD: "ViolatedAvoidDirtRoad",
    VIOLATED_AVOID_TUNNEL: "ViolatedAvoidTunnel",
    VIOLATED_PEDESTRIAN_OPTION: "ViolatedPedestrianOption",
};
exports.RouteSpanPedestrianAccessAttribute = {
    ALLOWED: "Allowed",
    INDOORS: "Indoors",
    NO_THROUGH_TRAFFIC: "NoThroughTraffic",
    PARK: "Park",
    STAIRS: "Stairs",
    TOLL_ROAD: "TollRoad",
};
exports.RouteSpanRoadAttribute = {
    BRIDGE: "Bridge",
    BUILT_UP_AREA: "BuiltUpArea",
    CONTROLLED_ACCESS_HIGHWAY: "ControlledAccessHighway",
    DIRT_ROAD: "DirtRoad",
    DIVIDED_ROAD: "DividedRoad",
    MOTORWAY: "Motorway",
    PRIVATE_ROAD: "PrivateRoad",
    RAMP: "Ramp",
    RIGHT_HAND_TRAFFIC: "RightHandTraffic",
    ROUNDABOUT: "Roundabout",
    TUNNEL: "Tunnel",
    UNDER_CONSTRUCTION: "UnderConstruction",
};
exports.RouteDirection = {
    EAST: "East",
    NORTH: "North",
    SOUTH: "South",
    WEST: "West",
};
exports.RouteRoadType = {
    HIGHWAY: "Highway",
    RURAL: "Rural",
    URBAN: "Urban",
};
exports.RouteSteeringDirection = {
    LEFT: "Left",
    RIGHT: "Right",
    STRAIGHT: "Straight",
};
exports.RouteTurnIntensity = {
    SHARP: "Sharp",
    SLIGHT: "Slight",
    TYPICAL: "Typical",
};
exports.RoutePedestrianTravelStepType = {
    ARRIVE: "Arrive",
    CONTINUE: "Continue",
    DEPART: "Depart",
    EXIT: "Exit",
    KEEP: "Keep",
    RAMP: "Ramp",
    ROUNDABOUT_ENTER: "RoundaboutEnter",
    ROUNDABOUT_EXIT: "RoundaboutExit",
    ROUNDABOUT_PASS: "RoundaboutPass",
    TURN: "Turn",
    U_TURN: "UTurn",
};
exports.RouteLegTravelMode = {
    CAR: "Car",
    CAR_SHUTTLE_TRAIN: "CarShuttleTrain",
    FERRY: "Ferry",
    PEDESTRIAN: "Pedestrian",
    SCOOTER: "Scooter",
    TRUCK: "Truck",
};
exports.RouteLegType = {
    FERRY: "Ferry",
    PEDESTRIAN: "Pedestrian",
    VEHICLE: "Vehicle",
};
exports.RouteVehicleIncidentSeverity = {
    CRITICAL: "Critical",
    HIGH: "High",
    LOW: "Low",
    MEDIUM: "Medium",
};
exports.RouteVehicleIncidentType = {
    ACCIDENT: "Accident",
    CONGESTION: "Congestion",
    CONSTRUCTION: "Construction",
    DISABLED_VEHICLE: "DisabledVehicle",
    LANE_RESTRICTION: "LaneRestriction",
    MASS_TRANSIT: "MassTransit",
    OTHER: "Other",
    PLANNED_EVENT: "PlannedEvent",
    ROAD_CLOSURE: "RoadClosure",
    ROAD_HAZARD: "RoadHazard",
    WEATHER: "Weather",
};
exports.RouteVehicleNoticeCode = {
    ACCURATE_POLYLINE_UNAVAILABLE: "AccuratePolylineUnavailable",
    OTHER: "Other",
    POTENTIAL_VIOLATED_AVOID_TOLL_ROAD_USAGE: "PotentialViolatedAvoidTollRoadUsage",
    POTENTIAL_VIOLATED_CARPOOL_USAGE: "PotentialViolatedCarpoolUsage",
    POTENTIAL_VIOLATED_TURN_RESTRICTION_USAGE: "PotentialViolatedTurnRestrictionUsage",
    POTENTIAL_VIOLATED_VEHICLE_RESTRICTION_USAGE: "PotentialViolatedVehicleRestrictionUsage",
    POTENTIAL_VIOLATED_ZONE_RESTRICTION_USAGE: "PotentialViolatedZoneRestrictionUsage",
    SEASONAL_CLOSURE: "SeasonalClosure",
    TOLLS_DATA_TEMPORARILY_UNAVAILABLE: "TollsDataTemporarilyUnavailable",
    TOLLS_DATA_UNAVAILABLE: "TollsDataUnavailable",
    TOLL_TRANSPONDER: "TollTransponder",
    VIOLATED_AVOID_CONTROLLED_ACCESS_HIGHWAY: "ViolatedAvoidControlledAccessHighway",
    VIOLATED_AVOID_DIFFICULT_TURNS: "ViolatedAvoidDifficultTurns",
    VIOLATED_AVOID_DIRT_ROAD: "ViolatedAvoidDirtRoad",
    VIOLATED_AVOID_SEASONAL_CLOSURE: "ViolatedAvoidSeasonalClosure",
    VIOLATED_AVOID_TOLL_ROAD: "ViolatedAvoidTollRoad",
    VIOLATED_AVOID_TOLL_TRANSPONDER: "ViolatedAvoidTollTransponder",
    VIOLATED_AVOID_TRUCK_ROAD_TYPE: "ViolatedAvoidTruckRoadType",
    VIOLATED_AVOID_TUNNEL: "ViolatedAvoidTunnel",
    VIOLATED_AVOID_U_TURNS: "ViolatedAvoidUTurns",
    VIOLATED_BLOCKED_ROAD: "ViolatedBlockedRoad",
    VIOLATED_CARPOOL: "ViolatedCarpool",
    VIOLATED_EMERGENCY_GATE: "ViolatedEmergencyGate",
    VIOLATED_START_DIRECTION: "ViolatedStartDirection",
    VIOLATED_TURN_RESTRICTION: "ViolatedTurnRestriction",
    VIOLATED_VEHICLE_RESTRICTION: "ViolatedVehicleRestriction",
    VIOLATED_ZONE_RESTRICTION: "ViolatedZoneRestriction",
};
exports.RouteWeightConstraintType = {
    CURRENT: "Current",
    GROSS: "Gross",
    UNKNOWN: "Unknown",
};
exports.RouteSpanCarAccessAttribute = {
    ALLOWED: "Allowed",
    NO_THROUGH_TRAFFIC: "NoThroughTraffic",
    TOLL_ROAD: "TollRoad",
};
exports.RouteSpanGateAttribute = {
    EMERGENCY: "Emergency",
    KEY_ACCESS: "KeyAccess",
    PERMISSION_REQUIRED: "PermissionRequired",
};
exports.RouteSpanRailwayCrossingAttribute = {
    PROTECTED: "Protected",
    UNPROTECTED: "Unprotected",
};
exports.RouteSpanScooterAccessAttribute = {
    ALLOWED: "Allowed",
    NO_THROUGH_TRAFFIC: "NoThroughTraffic",
    TOLL_ROAD: "TollRoad",
};
exports.RouteSpanTruckAccessAttribute = {
    ALLOWED: "Allowed",
    NO_THROUGH_TRAFFIC: "NoThroughTraffic",
    TOLL_ROAD: "TollRoad",
};
exports.RouteTollPassValidityPeriodType = {
    ANNUAL: "Annual",
    DAYS: "Days",
    EXTENDED_ANNUAL: "ExtendedAnnual",
    MINUTES: "Minutes",
    MONTHS: "Months",
};
exports.RouteTollPaymentMethod = {
    BANK_CARD: "BankCard",
    CASH: "Cash",
    CASH_EXACT: "CashExact",
    CREDIT_CARD: "CreditCard",
    PASS_SUBSCRIPTION: "PassSubscription",
    TRANSPONDER: "Transponder",
    TRAVEL_CARD: "TravelCard",
    VIDEO_TOLL: "VideoToll",
};
exports.RouteVehicleTravelStepType = {
    ARRIVE: "Arrive",
    CONTINUE: "Continue",
    CONTINUE_HIGHWAY: "ContinueHighway",
    DEPART: "Depart",
    ENTER_HIGHWAY: "EnterHighway",
    EXIT: "Exit",
    KEEP: "Keep",
    RAMP: "Ramp",
    ROUNDABOUT_ENTER: "RoundaboutEnter",
    ROUNDABOUT_EXIT: "RoundaboutExit",
    ROUNDABOUT_PASS: "RoundaboutPass",
    TURN: "Turn",
    U_TURN: "UTurn",
};
exports.DayOfWeek = {
    FRIDAY: "Friday",
    MONDAY: "Monday",
    SATURDAY: "Saturday",
    SUNDAY: "Sunday",
    THURSDAY: "Thursday",
    TUESDAY: "Tuesday",
    WEDNESDAY: "Wednesday",
};
exports.WaypointOptimizationClusteringAlgorithm = {
    DRIVING_DISTANCE: "DrivingDistance",
    TOPOLOGY_SEGMENT: "TopologySegment",
};
exports.WaypointOptimizationServiceTimeTreatment = {
    REST: "Rest",
    WORK: "Work",
};
exports.WaypointOptimizationSequencingObjective = {
    FASTEST_ROUTE: "FastestRoute",
    SHORTEST_ROUTE: "ShortestRoute",
};
exports.WaypointOptimizationTravelMode = {
    CAR: "Car",
    PEDESTRIAN: "Pedestrian",
    SCOOTER: "Scooter",
    TRUCK: "Truck",
};
exports.WaypointOptimizationHazardousCargoType = {
    COMBUSTIBLE: "Combustible",
    CORROSIVE: "Corrosive",
    EXPLOSIVE: "Explosive",
    FLAMMABLE: "Flammable",
    GAS: "Gas",
    HARMFUL_TO_WATER: "HarmfulToWater",
    ORGANIC: "Organic",
    OTHER: "Other",
    POISON: "Poison",
    POISONOUS_INHALATION: "PoisonousInhalation",
    RADIOACTIVE: "Radioactive",
};
exports.WaypointOptimizationTruckType = {
    STRAIGHT_TRUCK: "StraightTruck",
    TRACTOR: "Tractor",
};
exports.WaypointOptimizationConstraint = {
    ACCESS_HOURS: "AccessHours",
    APPOINTMENT_TIME: "AppointmentTime",
    BEFORE: "Before",
    HEADING: "Heading",
    SERVICE_DURATION: "ServiceDuration",
    SIDE_OF_STREET: "SideOfStreet",
};
exports.RoadSnapTravelMode = {
    CAR: "Car",
    PEDESTRIAN: "Pedestrian",
    SCOOTER: "Scooter",
    TRUCK: "Truck",
};
exports.RoadSnapHazardousCargoType = {
    COMBUSTIBLE: "Combustible",
    CORROSIVE: "Corrosive",
    EXPLOSIVE: "Explosive",
    FLAMMABLE: "Flammable",
    GAS: "Gas",
    HARMFUL_TO_WATER: "HarmfulToWater",
    ORGANIC: "Organic",
    OTHER: "Other",
    POISON: "Poison",
    POISONOUS_INHALATION: "PoisonousInhalation",
    RADIOACTIVE: "Radioactive",
};
exports.RoadSnapNoticeCode = {
    TRACE_POINTS_HEADING_IGNORED: "TracePointsHeadingIgnored",
    TRACE_POINTS_IGNORED: "TracePointsIgnored",
    TRACE_POINTS_MOVED_BY_LARGE_DISTANCE: "TracePointsMovedByLargeDistance",
    TRACE_POINTS_NOT_MATCHED: "TracePointsNotMatched",
    TRACE_POINTS_OUT_OF_SEQUENCE: "TracePointsOutOfSequence",
    TRACE_POINTS_SPEED_ESTIMATED: "TracePointsSpeedEstimated",
    TRACE_POINTS_SPEED_IGNORED: "TracePointsSpeedIgnored",
};
const CorridorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LineString && { LineString: smithy_client_1.SENSITIVE_STRING }),
});
exports.CorridorFilterSensitiveLog = CorridorFilterSensitiveLog;
const PolylineCorridorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Polyline && { Polyline: smithy_client_1.SENSITIVE_STRING }),
});
exports.PolylineCorridorFilterSensitiveLog = PolylineCorridorFilterSensitiveLog;
const IsolineAvoidanceAreaGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BoundingBox && { BoundingBox: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Corridor && { Corridor: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Polygon && { Polygon: obj.Polygon.map((item) => smithy_client_1.SENSITIVE_STRING) }),
    ...(obj.PolylineCorridor && { PolylineCorridor: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.PolylinePolygon && { PolylinePolygon: smithy_client_1.SENSITIVE_STRING }),
});
exports.IsolineAvoidanceAreaGeometryFilterSensitiveLog = IsolineAvoidanceAreaGeometryFilterSensitiveLog;
const IsolineAvoidanceAreaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Except && { Except: obj.Except.map((item) => (0, exports.IsolineAvoidanceAreaGeometryFilterSensitiveLog)(item)) }),
    ...(obj.Geometry && { Geometry: (0, exports.IsolineAvoidanceAreaGeometryFilterSensitiveLog)(obj.Geometry) }),
});
exports.IsolineAvoidanceAreaFilterSensitiveLog = IsolineAvoidanceAreaFilterSensitiveLog;
const IsolineAvoidanceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Areas && { Areas: obj.Areas.map((item) => (0, exports.IsolineAvoidanceAreaFilterSensitiveLog)(item)) }),
});
exports.IsolineAvoidanceOptionsFilterSensitiveLog = IsolineAvoidanceOptionsFilterSensitiveLog;
const IsolineMatchingOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.NameHint && { NameHint: smithy_client_1.SENSITIVE_STRING }),
});
exports.IsolineMatchingOptionsFilterSensitiveLog = IsolineMatchingOptionsFilterSensitiveLog;
const IsolineSideOfStreetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.IsolineSideOfStreetOptionsFilterSensitiveLog = IsolineSideOfStreetOptionsFilterSensitiveLog;
const IsolineDestinationOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Matching && { Matching: (0, exports.IsolineMatchingOptionsFilterSensitiveLog)(obj.Matching) }),
    ...(obj.SideOfStreet && { SideOfStreet: (0, exports.IsolineSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet) }),
});
exports.IsolineDestinationOptionsFilterSensitiveLog = IsolineDestinationOptionsFilterSensitiveLog;
const IsolineOriginOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Matching && { Matching: (0, exports.IsolineMatchingOptionsFilterSensitiveLog)(obj.Matching) }),
    ...(obj.SideOfStreet && { SideOfStreet: (0, exports.IsolineSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet) }),
});
exports.IsolineOriginOptionsFilterSensitiveLog = IsolineOriginOptionsFilterSensitiveLog;
const CalculateIsolinesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Avoid && { Avoid: (0, exports.IsolineAvoidanceOptionsFilterSensitiveLog)(obj.Avoid) }),
    ...(obj.Destination && { Destination: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.DestinationOptions && {
        DestinationOptions: (0, exports.IsolineDestinationOptionsFilterSensitiveLog)(obj.DestinationOptions),
    }),
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Origin && { Origin: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.OriginOptions && { OriginOptions: (0, exports.IsolineOriginOptionsFilterSensitiveLog)(obj.OriginOptions) }),
});
exports.CalculateIsolinesRequestFilterSensitiveLog = CalculateIsolinesRequestFilterSensitiveLog;
const IsolineConnectionGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LineString && { LineString: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Polyline && { Polyline: smithy_client_1.SENSITIVE_STRING }),
});
exports.IsolineConnectionGeometryFilterSensitiveLog = IsolineConnectionGeometryFilterSensitiveLog;
const IsolineConnectionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Geometry && { Geometry: (0, exports.IsolineConnectionGeometryFilterSensitiveLog)(obj.Geometry) }),
});
exports.IsolineConnectionFilterSensitiveLog = IsolineConnectionFilterSensitiveLog;
const IsolineShapeGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Polygon && { Polygon: obj.Polygon.map((item) => smithy_client_1.SENSITIVE_STRING) }),
    ...(obj.PolylinePolygon && { PolylinePolygon: smithy_client_1.SENSITIVE_STRING }),
});
exports.IsolineShapeGeometryFilterSensitiveLog = IsolineShapeGeometryFilterSensitiveLog;
const IsolineFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Connections && { Connections: obj.Connections.map((item) => (0, exports.IsolineConnectionFilterSensitiveLog)(item)) }),
    ...(obj.Geometries && { Geometries: obj.Geometries.map((item) => (0, exports.IsolineShapeGeometryFilterSensitiveLog)(item)) }),
});
exports.IsolineFilterSensitiveLog = IsolineFilterSensitiveLog;
const CalculateIsolinesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnappedDestination && { SnappedDestination: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SnappedOrigin && { SnappedOrigin: smithy_client_1.SENSITIVE_STRING }),
});
exports.CalculateIsolinesResponseFilterSensitiveLog = CalculateIsolinesResponseFilterSensitiveLog;
const RouteMatrixAvoidanceAreaGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BoundingBox && { BoundingBox: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Polygon && { Polygon: obj.Polygon.map((item) => smithy_client_1.SENSITIVE_STRING) }),
    ...(obj.PolylinePolygon && { PolylinePolygon: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteMatrixAvoidanceAreaGeometryFilterSensitiveLog = RouteMatrixAvoidanceAreaGeometryFilterSensitiveLog;
const RouteMatrixAvoidanceAreaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Geometry && { Geometry: (0, exports.RouteMatrixAvoidanceAreaGeometryFilterSensitiveLog)(obj.Geometry) }),
});
exports.RouteMatrixAvoidanceAreaFilterSensitiveLog = RouteMatrixAvoidanceAreaFilterSensitiveLog;
const RouteMatrixAvoidanceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Areas && { Areas: obj.Areas.map((item) => (0, exports.RouteMatrixAvoidanceAreaFilterSensitiveLog)(item)) }),
});
exports.RouteMatrixAvoidanceOptionsFilterSensitiveLog = RouteMatrixAvoidanceOptionsFilterSensitiveLog;
const RouteMatrixMatchingOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.NameHint && { NameHint: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteMatrixMatchingOptionsFilterSensitiveLog = RouteMatrixMatchingOptionsFilterSensitiveLog;
const RouteMatrixSideOfStreetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteMatrixSideOfStreetOptionsFilterSensitiveLog = RouteMatrixSideOfStreetOptionsFilterSensitiveLog;
const RouteMatrixDestinationOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Matching && { Matching: (0, exports.RouteMatrixMatchingOptionsFilterSensitiveLog)(obj.Matching) }),
    ...(obj.SideOfStreet && { SideOfStreet: (0, exports.RouteMatrixSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet) }),
});
exports.RouteMatrixDestinationOptionsFilterSensitiveLog = RouteMatrixDestinationOptionsFilterSensitiveLog;
const RouteMatrixDestinationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Options && { Options: (0, exports.RouteMatrixDestinationOptionsFilterSensitiveLog)(obj.Options) }),
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteMatrixDestinationFilterSensitiveLog = RouteMatrixDestinationFilterSensitiveLog;
const RouteMatrixOriginOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Matching && { Matching: (0, exports.RouteMatrixMatchingOptionsFilterSensitiveLog)(obj.Matching) }),
    ...(obj.SideOfStreet && { SideOfStreet: (0, exports.RouteMatrixSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet) }),
});
exports.RouteMatrixOriginOptionsFilterSensitiveLog = RouteMatrixOriginOptionsFilterSensitiveLog;
const RouteMatrixOriginFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Options && { Options: (0, exports.RouteMatrixOriginOptionsFilterSensitiveLog)(obj.Options) }),
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteMatrixOriginFilterSensitiveLog = RouteMatrixOriginFilterSensitiveLog;
const CircleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Center && { Center: smithy_client_1.SENSITIVE_STRING }),
});
exports.CircleFilterSensitiveLog = CircleFilterSensitiveLog;
const RouteMatrixBoundaryGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Circle && { Circle: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.BoundingBox && { BoundingBox: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Polygon && { Polygon: obj.Polygon.map((item) => smithy_client_1.SENSITIVE_STRING) }),
});
exports.RouteMatrixBoundaryGeometryFilterSensitiveLog = RouteMatrixBoundaryGeometryFilterSensitiveLog;
const RouteMatrixBoundaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Geometry && { Geometry: (0, exports.RouteMatrixBoundaryGeometryFilterSensitiveLog)(obj.Geometry) }),
});
exports.RouteMatrixBoundaryFilterSensitiveLog = RouteMatrixBoundaryFilterSensitiveLog;
const CalculateRouteMatrixRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Avoid && { Avoid: (0, exports.RouteMatrixAvoidanceOptionsFilterSensitiveLog)(obj.Avoid) }),
    ...(obj.Destinations && {
        Destinations: obj.Destinations.map((item) => (0, exports.RouteMatrixDestinationFilterSensitiveLog)(item)),
    }),
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Origins && { Origins: obj.Origins.map((item) => (0, exports.RouteMatrixOriginFilterSensitiveLog)(item)) }),
    ...(obj.RoutingBoundary && { RoutingBoundary: (0, exports.RouteMatrixBoundaryFilterSensitiveLog)(obj.RoutingBoundary) }),
});
exports.CalculateRouteMatrixRequestFilterSensitiveLog = CalculateRouteMatrixRequestFilterSensitiveLog;
const CalculateRouteMatrixResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RoutingBoundary && { RoutingBoundary: (0, exports.RouteMatrixBoundaryFilterSensitiveLog)(obj.RoutingBoundary) }),
});
exports.CalculateRouteMatrixResponseFilterSensitiveLog = CalculateRouteMatrixResponseFilterSensitiveLog;
const RouteAvoidanceAreaGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Corridor && { Corridor: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.BoundingBox && { BoundingBox: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Polygon && { Polygon: obj.Polygon.map((item) => smithy_client_1.SENSITIVE_STRING) }),
    ...(obj.PolylineCorridor && { PolylineCorridor: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.PolylinePolygon && { PolylinePolygon: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteAvoidanceAreaGeometryFilterSensitiveLog = RouteAvoidanceAreaGeometryFilterSensitiveLog;
const RouteAvoidanceAreaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Except && { Except: obj.Except.map((item) => (0, exports.RouteAvoidanceAreaGeometryFilterSensitiveLog)(item)) }),
    ...(obj.Geometry && { Geometry: (0, exports.RouteAvoidanceAreaGeometryFilterSensitiveLog)(obj.Geometry) }),
});
exports.RouteAvoidanceAreaFilterSensitiveLog = RouteAvoidanceAreaFilterSensitiveLog;
const RouteAvoidanceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Areas && { Areas: obj.Areas.map((item) => (0, exports.RouteAvoidanceAreaFilterSensitiveLog)(item)) }),
});
exports.RouteAvoidanceOptionsFilterSensitiveLog = RouteAvoidanceOptionsFilterSensitiveLog;
const RouteMatchingOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.NameHint && { NameHint: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteMatchingOptionsFilterSensitiveLog = RouteMatchingOptionsFilterSensitiveLog;
const RouteSideOfStreetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteSideOfStreetOptionsFilterSensitiveLog = RouteSideOfStreetOptionsFilterSensitiveLog;
const RouteDestinationOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Matching && { Matching: (0, exports.RouteMatchingOptionsFilterSensitiveLog)(obj.Matching) }),
    ...(obj.SideOfStreet && { SideOfStreet: (0, exports.RouteSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet) }),
});
exports.RouteDestinationOptionsFilterSensitiveLog = RouteDestinationOptionsFilterSensitiveLog;
const RouteOriginOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Matching && { Matching: (0, exports.RouteMatchingOptionsFilterSensitiveLog)(obj.Matching) }),
    ...(obj.SideOfStreet && { SideOfStreet: (0, exports.RouteSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet) }),
});
exports.RouteOriginOptionsFilterSensitiveLog = RouteOriginOptionsFilterSensitiveLog;
const RouteWaypointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Matching && { Matching: (0, exports.RouteMatchingOptionsFilterSensitiveLog)(obj.Matching) }),
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SideOfStreet && { SideOfStreet: (0, exports.RouteSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet) }),
});
exports.RouteWaypointFilterSensitiveLog = RouteWaypointFilterSensitiveLog;
const CalculateRoutesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Avoid && { Avoid: (0, exports.RouteAvoidanceOptionsFilterSensitiveLog)(obj.Avoid) }),
    ...(obj.Destination && { Destination: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.DestinationOptions && {
        DestinationOptions: (0, exports.RouteDestinationOptionsFilterSensitiveLog)(obj.DestinationOptions),
    }),
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Origin && { Origin: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.OriginOptions && { OriginOptions: (0, exports.RouteOriginOptionsFilterSensitiveLog)(obj.OriginOptions) }),
    ...(obj.Waypoints && { Waypoints: obj.Waypoints.map((item) => (0, exports.RouteWaypointFilterSensitiveLog)(item)) }),
});
exports.CalculateRoutesRequestFilterSensitiveLog = CalculateRoutesRequestFilterSensitiveLog;
const RouteFerryPlaceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OriginalPosition && { OriginalPosition: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteFerryPlaceFilterSensitiveLog = RouteFerryPlaceFilterSensitiveLog;
const RouteFerryArrivalFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Place && { Place: (0, exports.RouteFerryPlaceFilterSensitiveLog)(obj.Place) }),
});
exports.RouteFerryArrivalFilterSensitiveLog = RouteFerryArrivalFilterSensitiveLog;
const RouteFerryDepartureFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Place && { Place: (0, exports.RouteFerryPlaceFilterSensitiveLog)(obj.Place) }),
});
exports.RouteFerryDepartureFilterSensitiveLog = RouteFerryDepartureFilterSensitiveLog;
const RoutePassThroughPlaceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OriginalPosition && { OriginalPosition: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RoutePassThroughPlaceFilterSensitiveLog = RoutePassThroughPlaceFilterSensitiveLog;
const RoutePassThroughWaypointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Place && { Place: (0, exports.RoutePassThroughPlaceFilterSensitiveLog)(obj.Place) }),
});
exports.RoutePassThroughWaypointFilterSensitiveLog = RoutePassThroughWaypointFilterSensitiveLog;
const RouteFerryLegDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Arrival && { Arrival: (0, exports.RouteFerryArrivalFilterSensitiveLog)(obj.Arrival) }),
    ...(obj.Departure && { Departure: (0, exports.RouteFerryDepartureFilterSensitiveLog)(obj.Departure) }),
    ...(obj.PassThroughWaypoints && {
        PassThroughWaypoints: obj.PassThroughWaypoints.map((item) => (0, exports.RoutePassThroughWaypointFilterSensitiveLog)(item)),
    }),
});
exports.RouteFerryLegDetailsFilterSensitiveLog = RouteFerryLegDetailsFilterSensitiveLog;
const RouteLegGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LineString && { LineString: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Polyline && { Polyline: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteLegGeometryFilterSensitiveLog = RouteLegGeometryFilterSensitiveLog;
const RoutePedestrianPlaceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OriginalPosition && { OriginalPosition: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RoutePedestrianPlaceFilterSensitiveLog = RoutePedestrianPlaceFilterSensitiveLog;
const RoutePedestrianArrivalFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Place && { Place: (0, exports.RoutePedestrianPlaceFilterSensitiveLog)(obj.Place) }),
});
exports.RoutePedestrianArrivalFilterSensitiveLog = RoutePedestrianArrivalFilterSensitiveLog;
const RoutePedestrianDepartureFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Place && { Place: (0, exports.RoutePedestrianPlaceFilterSensitiveLog)(obj.Place) }),
});
exports.RoutePedestrianDepartureFilterSensitiveLog = RoutePedestrianDepartureFilterSensitiveLog;
const RoutePedestrianLegDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Arrival && { Arrival: (0, exports.RoutePedestrianArrivalFilterSensitiveLog)(obj.Arrival) }),
    ...(obj.Departure && { Departure: (0, exports.RoutePedestrianDepartureFilterSensitiveLog)(obj.Departure) }),
    ...(obj.PassThroughWaypoints && {
        PassThroughWaypoints: obj.PassThroughWaypoints.map((item) => (0, exports.RoutePassThroughWaypointFilterSensitiveLog)(item)),
    }),
});
exports.RoutePedestrianLegDetailsFilterSensitiveLog = RoutePedestrianLegDetailsFilterSensitiveLog;
const RouteVehiclePlaceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OriginalPosition && { OriginalPosition: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteVehiclePlaceFilterSensitiveLog = RouteVehiclePlaceFilterSensitiveLog;
const RouteVehicleArrivalFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Place && { Place: (0, exports.RouteVehiclePlaceFilterSensitiveLog)(obj.Place) }),
});
exports.RouteVehicleArrivalFilterSensitiveLog = RouteVehicleArrivalFilterSensitiveLog;
const RouteVehicleDepartureFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Place && { Place: (0, exports.RouteVehiclePlaceFilterSensitiveLog)(obj.Place) }),
});
exports.RouteVehicleDepartureFilterSensitiveLog = RouteVehicleDepartureFilterSensitiveLog;
const RouteTollPaymentSiteFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RouteTollPaymentSiteFilterSensitiveLog = RouteTollPaymentSiteFilterSensitiveLog;
const RouteTollFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PaymentSites && {
        PaymentSites: obj.PaymentSites.map((item) => (0, exports.RouteTollPaymentSiteFilterSensitiveLog)(item)),
    }),
});
exports.RouteTollFilterSensitiveLog = RouteTollFilterSensitiveLog;
const RouteVehicleLegDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Arrival && { Arrival: (0, exports.RouteVehicleArrivalFilterSensitiveLog)(obj.Arrival) }),
    ...(obj.Departure && { Departure: (0, exports.RouteVehicleDepartureFilterSensitiveLog)(obj.Departure) }),
    ...(obj.PassThroughWaypoints && {
        PassThroughWaypoints: obj.PassThroughWaypoints.map((item) => (0, exports.RoutePassThroughWaypointFilterSensitiveLog)(item)),
    }),
});
exports.RouteVehicleLegDetailsFilterSensitiveLog = RouteVehicleLegDetailsFilterSensitiveLog;
const RouteLegFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FerryLegDetails && { FerryLegDetails: (0, exports.RouteFerryLegDetailsFilterSensitiveLog)(obj.FerryLegDetails) }),
    ...(obj.Geometry && { Geometry: (0, exports.RouteLegGeometryFilterSensitiveLog)(obj.Geometry) }),
    ...(obj.PedestrianLegDetails && {
        PedestrianLegDetails: (0, exports.RoutePedestrianLegDetailsFilterSensitiveLog)(obj.PedestrianLegDetails),
    }),
    ...(obj.VehicleLegDetails && { VehicleLegDetails: (0, exports.RouteVehicleLegDetailsFilterSensitiveLog)(obj.VehicleLegDetails) }),
});
exports.RouteLegFilterSensitiveLog = RouteLegFilterSensitiveLog;
const RouteFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Legs && { Legs: obj.Legs.map((item) => (0, exports.RouteLegFilterSensitiveLog)(item)) }),
});
exports.RouteFilterSensitiveLog = RouteFilterSensitiveLog;
const CalculateRoutesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CalculateRoutesResponseFilterSensitiveLog = CalculateRoutesResponseFilterSensitiveLog;
const WaypointOptimizationAvoidanceAreaGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BoundingBox && { BoundingBox: smithy_client_1.SENSITIVE_STRING }),
});
exports.WaypointOptimizationAvoidanceAreaGeometryFilterSensitiveLog = WaypointOptimizationAvoidanceAreaGeometryFilterSensitiveLog;
const WaypointOptimizationAvoidanceAreaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Geometry && { Geometry: (0, exports.WaypointOptimizationAvoidanceAreaGeometryFilterSensitiveLog)(obj.Geometry) }),
});
exports.WaypointOptimizationAvoidanceAreaFilterSensitiveLog = WaypointOptimizationAvoidanceAreaFilterSensitiveLog;
const WaypointOptimizationAvoidanceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Areas && { Areas: obj.Areas.map((item) => (0, exports.WaypointOptimizationAvoidanceAreaFilterSensitiveLog)(item)) }),
});
exports.WaypointOptimizationAvoidanceOptionsFilterSensitiveLog = WaypointOptimizationAvoidanceOptionsFilterSensitiveLog;
const WaypointOptimizationSideOfStreetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.WaypointOptimizationSideOfStreetOptionsFilterSensitiveLog = WaypointOptimizationSideOfStreetOptionsFilterSensitiveLog;
const WaypointOptimizationDestinationOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SideOfStreet && {
        SideOfStreet: (0, exports.WaypointOptimizationSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet),
    }),
});
exports.WaypointOptimizationDestinationOptionsFilterSensitiveLog = WaypointOptimizationDestinationOptionsFilterSensitiveLog;
const WaypointOptimizationWaypointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SideOfStreet && {
        SideOfStreet: (0, exports.WaypointOptimizationSideOfStreetOptionsFilterSensitiveLog)(obj.SideOfStreet),
    }),
});
exports.WaypointOptimizationWaypointFilterSensitiveLog = WaypointOptimizationWaypointFilterSensitiveLog;
const OptimizeWaypointsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Avoid && { Avoid: (0, exports.WaypointOptimizationAvoidanceOptionsFilterSensitiveLog)(obj.Avoid) }),
    ...(obj.Destination && { Destination: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.DestinationOptions && {
        DestinationOptions: (0, exports.WaypointOptimizationDestinationOptionsFilterSensitiveLog)(obj.DestinationOptions),
    }),
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Origin && { Origin: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Waypoints && {
        Waypoints: obj.Waypoints.map((item) => (0, exports.WaypointOptimizationWaypointFilterSensitiveLog)(item)),
    }),
});
exports.OptimizeWaypointsRequestFilterSensitiveLog = OptimizeWaypointsRequestFilterSensitiveLog;
const WaypointOptimizationImpedingWaypointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.WaypointOptimizationImpedingWaypointFilterSensitiveLog = WaypointOptimizationImpedingWaypointFilterSensitiveLog;
const WaypointOptimizationOptimizedWaypointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.WaypointOptimizationOptimizedWaypointFilterSensitiveLog = WaypointOptimizationOptimizedWaypointFilterSensitiveLog;
const OptimizeWaypointsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImpedingWaypoints && {
        ImpedingWaypoints: obj.ImpedingWaypoints.map((item) => (0, exports.WaypointOptimizationImpedingWaypointFilterSensitiveLog)(item)),
    }),
    ...(obj.OptimizedWaypoints && {
        OptimizedWaypoints: obj.OptimizedWaypoints.map((item) => (0, exports.WaypointOptimizationOptimizedWaypointFilterSensitiveLog)(item)),
    }),
});
exports.OptimizeWaypointsResponseFilterSensitiveLog = OptimizeWaypointsResponseFilterSensitiveLog;
const RoadSnapTracePointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Position && { Position: smithy_client_1.SENSITIVE_STRING }),
});
exports.RoadSnapTracePointFilterSensitiveLog = RoadSnapTracePointFilterSensitiveLog;
const SnapToRoadsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.TracePoints && { TracePoints: obj.TracePoints.map((item) => (0, exports.RoadSnapTracePointFilterSensitiveLog)(item)) }),
});
exports.SnapToRoadsRequestFilterSensitiveLog = SnapToRoadsRequestFilterSensitiveLog;
const RoadSnapSnappedGeometryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LineString && { LineString: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Polyline && { Polyline: smithy_client_1.SENSITIVE_STRING }),
});
exports.RoadSnapSnappedGeometryFilterSensitiveLog = RoadSnapSnappedGeometryFilterSensitiveLog;
const RoadSnapSnappedTracePointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OriginalPosition && { OriginalPosition: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SnappedPosition && { SnappedPosition: smithy_client_1.SENSITIVE_STRING }),
});
exports.RoadSnapSnappedTracePointFilterSensitiveLog = RoadSnapSnappedTracePointFilterSensitiveLog;
const SnapToRoadsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnappedGeometry && { SnappedGeometry: (0, exports.RoadSnapSnappedGeometryFilterSensitiveLog)(obj.SnappedGeometry) }),
    ...(obj.SnappedTracePoints && {
        SnappedTracePoints: obj.SnappedTracePoints.map((item) => (0, exports.RoadSnapSnappedTracePointFilterSensitiveLog)(item)),
    }),
});
exports.SnapToRoadsResponseFilterSensitiveLog = SnapToRoadsResponseFilterSensitiveLog;
