import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { GeoRoutesServiceException as __BaseException } from "./GeoRoutesServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface IsolineAllowOptions {
  Hot?: boolean | undefined;
  Hov?: boolean | undefined;
}
export interface Corridor {
  LineString: number[][] | undefined;
  Radius: number | undefined;
}
export interface PolylineCorridor {
  Polyline: string | undefined;
  Radius: number | undefined;
}
export interface IsolineAvoidanceAreaGeometry {
  BoundingBox?: number[] | undefined;
  Corridor?: Corridor | undefined;
  Polygon?: number[][][] | undefined;
  PolylineCorridor?: PolylineCorridor | undefined;
  PolylinePolygon?: string[] | undefined;
}
export interface IsolineAvoidanceArea {
  Except?: IsolineAvoidanceAreaGeometry[] | undefined;
  Geometry: IsolineAvoidanceAreaGeometry | undefined;
}
export declare const IsolineZoneCategory: {
  readonly CONGESTION_PRICING: "CongestionPricing";
  readonly ENVIRONMENTAL: "Environmental";
  readonly VIGNETTE: "Vignette";
};
export type IsolineZoneCategory =
  (typeof IsolineZoneCategory)[keyof typeof IsolineZoneCategory];
export interface IsolineAvoidanceZoneCategory {
  Category?: IsolineZoneCategory | undefined;
}
export interface IsolineAvoidanceOptions {
  Areas?: IsolineAvoidanceArea[] | undefined;
  CarShuttleTrains?: boolean | undefined;
  ControlledAccessHighways?: boolean | undefined;
  DirtRoads?: boolean | undefined;
  Ferries?: boolean | undefined;
  SeasonalClosure?: boolean | undefined;
  TollRoads?: boolean | undefined;
  TollTransponders?: boolean | undefined;
  TruckRoadTypes?: string[] | undefined;
  Tunnels?: boolean | undefined;
  UTurns?: boolean | undefined;
  ZoneCategories?: IsolineAvoidanceZoneCategory[] | undefined;
}
export declare const MatchingStrategy: {
  readonly MATCH_ANY: "MatchAny";
  readonly MATCH_MOST_SIGNIFICANT_ROAD: "MatchMostSignificantRoad";
};
export type MatchingStrategy =
  (typeof MatchingStrategy)[keyof typeof MatchingStrategy];
export interface IsolineMatchingOptions {
  NameHint?: string | undefined;
  OnRoadThreshold?: number | undefined;
  Radius?: number | undefined;
  Strategy?: MatchingStrategy | undefined;
}
export declare const SideOfStreetMatchingStrategy: {
  readonly ANY_STREET: "AnyStreet";
  readonly DIVIDED_STREET_ONLY: "DividedStreetOnly";
};
export type SideOfStreetMatchingStrategy =
  (typeof SideOfStreetMatchingStrategy)[keyof typeof SideOfStreetMatchingStrategy];
export interface IsolineSideOfStreetOptions {
  Position: number[] | undefined;
  UseWith?: SideOfStreetMatchingStrategy | undefined;
}
export interface IsolineDestinationOptions {
  AvoidActionsForDistance?: number | undefined;
  Heading?: number | undefined;
  Matching?: IsolineMatchingOptions | undefined;
  SideOfStreet?: IsolineSideOfStreetOptions | undefined;
}
export declare const GeometryFormat: {
  readonly FLEXIBLE_POLYLINE: "FlexiblePolyline";
  readonly SIMPLE: "Simple";
};
export type GeometryFormat =
  (typeof GeometryFormat)[keyof typeof GeometryFormat];
export interface IsolineGranularityOptions {
  MaxPoints?: number | undefined;
  MaxResolution?: number | undefined;
}
export declare const IsolineOptimizationObjective: {
  readonly ACCURATE_CALCULATION: "AccurateCalculation";
  readonly BALANCED_CALCULATION: "BalancedCalculation";
  readonly FAST_CALCULATION: "FastCalculation";
};
export type IsolineOptimizationObjective =
  (typeof IsolineOptimizationObjective)[keyof typeof IsolineOptimizationObjective];
export declare const RoutingObjective: {
  readonly FASTEST_ROUTE: "FastestRoute";
  readonly SHORTEST_ROUTE: "ShortestRoute";
};
export type RoutingObjective =
  (typeof RoutingObjective)[keyof typeof RoutingObjective];
export interface IsolineOriginOptions {
  AvoidActionsForDistance?: number | undefined;
  Heading?: number | undefined;
  Matching?: IsolineMatchingOptions | undefined;
  SideOfStreet?: IsolineSideOfStreetOptions | undefined;
}
export interface IsolineThresholds {
  Distance?: number[] | undefined;
  Time?: number[] | undefined;
}
export declare const TrafficUsage: {
  readonly IGNORE_TRAFFIC_DATA: "IgnoreTrafficData";
  readonly USE_TRAFFIC_DATA: "UseTrafficData";
};
export type TrafficUsage = (typeof TrafficUsage)[keyof typeof TrafficUsage];
export interface IsolineTrafficOptions {
  FlowEventThresholdOverride?: number | undefined;
  Usage?: TrafficUsage | undefined;
}
export declare const IsolineTravelMode: {
  readonly CAR: "Car";
  readonly PEDESTRIAN: "Pedestrian";
  readonly SCOOTER: "Scooter";
  readonly TRUCK: "Truck";
};
export type IsolineTravelMode =
  (typeof IsolineTravelMode)[keyof typeof IsolineTravelMode];
export declare const IsolineEngineType: {
  readonly ELECTRIC: "Electric";
  readonly INTERNAL_COMBUSTION: "InternalCombustion";
  readonly PLUGIN_HYBRID: "PluginHybrid";
};
export type IsolineEngineType =
  (typeof IsolineEngineType)[keyof typeof IsolineEngineType];
export interface IsolineVehicleLicensePlate {
  LastCharacter?: string | undefined;
}
export interface IsolineCarOptions {
  EngineType?: IsolineEngineType | undefined;
  LicensePlate?: IsolineVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
}
export interface IsolineScooterOptions {
  EngineType?: IsolineEngineType | undefined;
  LicensePlate?: IsolineVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
}
export declare const IsolineHazardousCargoType: {
  readonly COMBUSTIBLE: "Combustible";
  readonly CORROSIVE: "Corrosive";
  readonly EXPLOSIVE: "Explosive";
  readonly FLAMMABLE: "Flammable";
  readonly GAS: "Gas";
  readonly HARMFUL_TO_WATER: "HarmfulToWater";
  readonly ORGANIC: "Organic";
  readonly OTHER: "Other";
  readonly POISON: "Poison";
  readonly POISONOUS_INHALATION: "PoisonousInhalation";
  readonly RADIOACTIVE: "Radioactive";
};
export type IsolineHazardousCargoType =
  (typeof IsolineHazardousCargoType)[keyof typeof IsolineHazardousCargoType];
export interface IsolineTrailerOptions {
  AxleCount?: number | undefined;
  TrailerCount?: number | undefined;
}
export declare const IsolineTruckType: {
  readonly LIGHT_TRUCK: "LightTruck";
  readonly STRAIGHT_TRUCK: "StraightTruck";
  readonly TRACTOR: "Tractor";
};
export type IsolineTruckType =
  (typeof IsolineTruckType)[keyof typeof IsolineTruckType];
export interface WeightPerAxleGroup {
  Single?: number | undefined;
  Tandem?: number | undefined;
  Triple?: number | undefined;
  Quad?: number | undefined;
  Quint?: number | undefined;
}
export interface IsolineTruckOptions {
  AxleCount?: number | undefined;
  EngineType?: IsolineEngineType | undefined;
  GrossWeight?: number | undefined;
  HazardousCargos?: IsolineHazardousCargoType[] | undefined;
  Height?: number | undefined;
  HeightAboveFirstAxle?: number | undefined;
  KpraLength?: number | undefined;
  Length?: number | undefined;
  LicensePlate?: IsolineVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
  PayloadCapacity?: number | undefined;
  TireCount?: number | undefined;
  Trailer?: IsolineTrailerOptions | undefined;
  TruckType?: IsolineTruckType | undefined;
  TunnelRestrictionCode?: string | undefined;
  WeightPerAxle?: number | undefined;
  WeightPerAxleGroup?: WeightPerAxleGroup | undefined;
  Width?: number | undefined;
}
export interface IsolineTravelModeOptions {
  Car?: IsolineCarOptions | undefined;
  Scooter?: IsolineScooterOptions | undefined;
  Truck?: IsolineTruckOptions | undefined;
}
export interface CalculateIsolinesRequest {
  Allow?: IsolineAllowOptions | undefined;
  ArrivalTime?: string | undefined;
  Avoid?: IsolineAvoidanceOptions | undefined;
  DepartNow?: boolean | undefined;
  DepartureTime?: string | undefined;
  Destination?: number[] | undefined;
  DestinationOptions?: IsolineDestinationOptions | undefined;
  IsolineGeometryFormat?: GeometryFormat | undefined;
  IsolineGranularity?: IsolineGranularityOptions | undefined;
  Key?: string | undefined;
  OptimizeIsolineFor?: IsolineOptimizationObjective | undefined;
  OptimizeRoutingFor?: RoutingObjective | undefined;
  Origin?: number[] | undefined;
  OriginOptions?: IsolineOriginOptions | undefined;
  Thresholds: IsolineThresholds | undefined;
  Traffic?: IsolineTrafficOptions | undefined;
  TravelMode?: IsolineTravelMode | undefined;
  TravelModeOptions?: IsolineTravelModeOptions | undefined;
}
export interface IsolineConnectionGeometry {
  LineString?: number[][] | undefined;
  Polyline?: string | undefined;
}
export interface IsolineConnection {
  FromPolygonIndex: number | undefined;
  Geometry: IsolineConnectionGeometry | undefined;
  ToPolygonIndex: number | undefined;
}
export interface IsolineShapeGeometry {
  Polygon?: number[][][] | undefined;
  PolylinePolygon?: string[] | undefined;
}
export interface Isoline {
  Connections: IsolineConnection[] | undefined;
  DistanceThreshold?: number | undefined;
  Geometries: IsolineShapeGeometry[] | undefined;
  TimeThreshold?: number | undefined;
}
export interface CalculateIsolinesResponse {
  ArrivalTime?: string | undefined;
  DepartureTime?: string | undefined;
  IsolineGeometryFormat: GeometryFormat | undefined;
  Isolines: Isoline[] | undefined;
  PricingBucket: string | undefined;
  SnappedDestination?: number[] | undefined;
  SnappedOrigin?: number[] | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  $retryable: {};
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  $retryable: {};
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  Name: string | undefined;
  Message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CannotParse";
  readonly FIELD_VALIDATION_FAILED: "FieldValidationFailed";
  readonly MISSING: "Missing";
  readonly OTHER: "Other";
  readonly UNKNOWN_FIELD: "UnknownField";
  readonly UNKNOWN_OPERATION: "UnknownOperation";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  Reason: ValidationExceptionReason | undefined;
  FieldList: ValidationExceptionField[] | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface RouteMatrixAllowOptions {
  Hot?: boolean | undefined;
  Hov?: boolean | undefined;
}
export interface RouteMatrixAvoidanceAreaGeometry {
  BoundingBox?: number[] | undefined;
  Polygon?: number[][][] | undefined;
  PolylinePolygon?: string[] | undefined;
}
export interface RouteMatrixAvoidanceArea {
  Geometry: RouteMatrixAvoidanceAreaGeometry | undefined;
}
export declare const RouteMatrixZoneCategory: {
  readonly CONGESTION_PRICING: "CongestionPricing";
  readonly ENVIRONMENTAL: "Environmental";
  readonly VIGNETTE: "Vignette";
};
export type RouteMatrixZoneCategory =
  (typeof RouteMatrixZoneCategory)[keyof typeof RouteMatrixZoneCategory];
export interface RouteMatrixAvoidanceZoneCategory {
  Category?: RouteMatrixZoneCategory | undefined;
}
export interface RouteMatrixAvoidanceOptions {
  Areas?: RouteMatrixAvoidanceArea[] | undefined;
  CarShuttleTrains?: boolean | undefined;
  ControlledAccessHighways?: boolean | undefined;
  DirtRoads?: boolean | undefined;
  Ferries?: boolean | undefined;
  TollRoads?: boolean | undefined;
  TollTransponders?: boolean | undefined;
  TruckRoadTypes?: string[] | undefined;
  Tunnels?: boolean | undefined;
  UTurns?: boolean | undefined;
  ZoneCategories?: RouteMatrixAvoidanceZoneCategory[] | undefined;
}
export interface RouteMatrixMatchingOptions {
  NameHint?: string | undefined;
  OnRoadThreshold?: number | undefined;
  Radius?: number | undefined;
  Strategy?: MatchingStrategy | undefined;
}
export interface RouteMatrixSideOfStreetOptions {
  Position: number[] | undefined;
  UseWith?: SideOfStreetMatchingStrategy | undefined;
}
export interface RouteMatrixDestinationOptions {
  AvoidActionsForDistance?: number | undefined;
  Heading?: number | undefined;
  Matching?: RouteMatrixMatchingOptions | undefined;
  SideOfStreet?: RouteMatrixSideOfStreetOptions | undefined;
}
export interface RouteMatrixDestination {
  Options?: RouteMatrixDestinationOptions | undefined;
  Position: number[] | undefined;
}
export interface RouteMatrixExclusionOptions {
  Countries: string[] | undefined;
}
export interface RouteMatrixOriginOptions {
  AvoidActionsForDistance?: number | undefined;
  Heading?: number | undefined;
  Matching?: RouteMatrixMatchingOptions | undefined;
  SideOfStreet?: RouteMatrixSideOfStreetOptions | undefined;
}
export interface RouteMatrixOrigin {
  Options?: RouteMatrixOriginOptions | undefined;
  Position: number[] | undefined;
}
export interface RouteMatrixAutoCircle {
  Margin?: number | undefined;
  MaxRadius?: number | undefined;
}
export interface Circle {
  Center: number[] | undefined;
  Radius: number | undefined;
}
export interface RouteMatrixBoundaryGeometry {
  AutoCircle?: RouteMatrixAutoCircle | undefined;
  Circle?: Circle | undefined;
  BoundingBox?: number[] | undefined;
  Polygon?: number[][][] | undefined;
}
export interface RouteMatrixBoundary {
  Geometry?: RouteMatrixBoundaryGeometry | undefined;
  Unbounded?: boolean | undefined;
}
export interface RouteMatrixTrafficOptions {
  FlowEventThresholdOverride?: number | undefined;
  Usage?: TrafficUsage | undefined;
}
export declare const RouteMatrixTravelMode: {
  readonly CAR: "Car";
  readonly PEDESTRIAN: "Pedestrian";
  readonly SCOOTER: "Scooter";
  readonly TRUCK: "Truck";
};
export type RouteMatrixTravelMode =
  (typeof RouteMatrixTravelMode)[keyof typeof RouteMatrixTravelMode];
export interface RouteMatrixVehicleLicensePlate {
  LastCharacter?: string | undefined;
}
export interface RouteMatrixCarOptions {
  LicensePlate?: RouteMatrixVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
}
export interface RouteMatrixScooterOptions {
  LicensePlate?: RouteMatrixVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
}
export declare const RouteMatrixHazardousCargoType: {
  readonly COMBUSTIBLE: "Combustible";
  readonly CORROSIVE: "Corrosive";
  readonly EXPLOSIVE: "Explosive";
  readonly FLAMMABLE: "Flammable";
  readonly GAS: "Gas";
  readonly HARMFUL_TO_WATER: "HarmfulToWater";
  readonly ORGANIC: "Organic";
  readonly OTHER: "Other";
  readonly POISON: "Poison";
  readonly POISONOUS_INHALATION: "PoisonousInhalation";
  readonly RADIOACTIVE: "Radioactive";
};
export type RouteMatrixHazardousCargoType =
  (typeof RouteMatrixHazardousCargoType)[keyof typeof RouteMatrixHazardousCargoType];
export interface RouteMatrixTrailerOptions {
  TrailerCount?: number | undefined;
}
export declare const RouteMatrixTruckType: {
  readonly LIGHT_TRUCK: "LightTruck";
  readonly STRAIGHT_TRUCK: "StraightTruck";
  readonly TRACTOR: "Tractor";
};
export type RouteMatrixTruckType =
  (typeof RouteMatrixTruckType)[keyof typeof RouteMatrixTruckType];
export interface RouteMatrixTruckOptions {
  AxleCount?: number | undefined;
  GrossWeight?: number | undefined;
  HazardousCargos?: RouteMatrixHazardousCargoType[] | undefined;
  Height?: number | undefined;
  KpraLength?: number | undefined;
  Length?: number | undefined;
  LicensePlate?: RouteMatrixVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
  PayloadCapacity?: number | undefined;
  Trailer?: RouteMatrixTrailerOptions | undefined;
  TruckType?: RouteMatrixTruckType | undefined;
  TunnelRestrictionCode?: string | undefined;
  WeightPerAxle?: number | undefined;
  WeightPerAxleGroup?: WeightPerAxleGroup | undefined;
  Width?: number | undefined;
}
export interface RouteMatrixTravelModeOptions {
  Car?: RouteMatrixCarOptions | undefined;
  Scooter?: RouteMatrixScooterOptions | undefined;
  Truck?: RouteMatrixTruckOptions | undefined;
}
export interface CalculateRouteMatrixRequest {
  Allow?: RouteMatrixAllowOptions | undefined;
  Avoid?: RouteMatrixAvoidanceOptions | undefined;
  DepartNow?: boolean | undefined;
  DepartureTime?: string | undefined;
  Destinations: RouteMatrixDestination[] | undefined;
  Exclude?: RouteMatrixExclusionOptions | undefined;
  Key?: string | undefined;
  OptimizeRoutingFor?: RoutingObjective | undefined;
  Origins: RouteMatrixOrigin[] | undefined;
  RoutingBoundary: RouteMatrixBoundary | undefined;
  Traffic?: RouteMatrixTrafficOptions | undefined;
  TravelMode?: RouteMatrixTravelMode | undefined;
  TravelModeOptions?: RouteMatrixTravelModeOptions | undefined;
}
export declare const RouteMatrixErrorCode: {
  readonly NO_MATCH: "NoMatch";
  readonly NO_MATCH_DESTINATION: "NoMatchDestination";
  readonly NO_MATCH_ORIGIN: "NoMatchOrigin";
  readonly NO_ROUTE: "NoRoute";
  readonly OTHER: "Other";
  readonly OUT_OF_BOUNDS: "OutOfBounds";
  readonly OUT_OF_BOUNDS_DESTINATION: "OutOfBoundsDestination";
  readonly OUT_OF_BOUNDS_ORIGIN: "OutOfBoundsOrigin";
  readonly VIOLATION: "Violation";
};
export type RouteMatrixErrorCode =
  (typeof RouteMatrixErrorCode)[keyof typeof RouteMatrixErrorCode];
export interface RouteMatrixEntry {
  Distance: number | undefined;
  Duration: number | undefined;
  Error?: RouteMatrixErrorCode | undefined;
}
export interface CalculateRouteMatrixResponse {
  ErrorCount: number | undefined;
  PricingBucket: string | undefined;
  RouteMatrix: RouteMatrixEntry[][] | undefined;
  RoutingBoundary: RouteMatrixBoundary | undefined;
}
export interface RouteAllowOptions {
  Hot?: boolean | undefined;
  Hov?: boolean | undefined;
}
export interface RouteAvoidanceAreaGeometry {
  Corridor?: Corridor | undefined;
  BoundingBox?: number[] | undefined;
  Polygon?: number[][][] | undefined;
  PolylineCorridor?: PolylineCorridor | undefined;
  PolylinePolygon?: string[] | undefined;
}
export interface RouteAvoidanceArea {
  Except?: RouteAvoidanceAreaGeometry[] | undefined;
  Geometry: RouteAvoidanceAreaGeometry | undefined;
}
export declare const RouteZoneCategory: {
  readonly CONGESTION_PRICING: "CongestionPricing";
  readonly ENVIRONMENTAL: "Environmental";
  readonly VIGNETTE: "Vignette";
};
export type RouteZoneCategory =
  (typeof RouteZoneCategory)[keyof typeof RouteZoneCategory];
export interface RouteAvoidanceZoneCategory {
  Category: RouteZoneCategory | undefined;
}
export interface RouteAvoidanceOptions {
  Areas?: RouteAvoidanceArea[] | undefined;
  CarShuttleTrains?: boolean | undefined;
  ControlledAccessHighways?: boolean | undefined;
  DirtRoads?: boolean | undefined;
  Ferries?: boolean | undefined;
  SeasonalClosure?: boolean | undefined;
  TollRoads?: boolean | undefined;
  TollTransponders?: boolean | undefined;
  TruckRoadTypes?: string[] | undefined;
  Tunnels?: boolean | undefined;
  UTurns?: boolean | undefined;
  ZoneCategories?: RouteAvoidanceZoneCategory[] | undefined;
}
export interface RouteMatchingOptions {
  NameHint?: string | undefined;
  OnRoadThreshold?: number | undefined;
  Radius?: number | undefined;
  Strategy?: MatchingStrategy | undefined;
}
export interface RouteSideOfStreetOptions {
  Position: number[] | undefined;
  UseWith?: SideOfStreetMatchingStrategy | undefined;
}
export interface RouteDestinationOptions {
  AvoidActionsForDistance?: number | undefined;
  AvoidUTurns?: boolean | undefined;
  Heading?: number | undefined;
  Matching?: RouteMatchingOptions | undefined;
  SideOfStreet?: RouteSideOfStreetOptions | undefined;
  StopDuration?: number | undefined;
}
export interface RouteDriverScheduleInterval {
  DriveDuration: number | undefined;
  RestDuration: number | undefined;
}
export interface RouteDriverOptions {
  Schedule?: RouteDriverScheduleInterval[] | undefined;
}
export interface RouteExclusionOptions {
  Countries: string[] | undefined;
}
export declare const MeasurementSystem: {
  readonly IMPERIAL: "Imperial";
  readonly METRIC: "Metric";
};
export type MeasurementSystem =
  (typeof MeasurementSystem)[keyof typeof MeasurementSystem];
export declare const RouteLegAdditionalFeature: {
  readonly ELEVATION: "Elevation";
  readonly INCIDENTS: "Incidents";
  readonly PASS_THROUGH_WAYPOINTS: "PassThroughWaypoints";
  readonly SUMMARY: "Summary";
  readonly TOLLS: "Tolls";
  readonly TRAVEL_STEP_INSTRUCTIONS: "TravelStepInstructions";
  readonly TRUCK_ROAD_TYPES: "TruckRoadTypes";
  readonly TYPICAL_DURATION: "TypicalDuration";
  readonly ZONES: "Zones";
};
export type RouteLegAdditionalFeature =
  (typeof RouteLegAdditionalFeature)[keyof typeof RouteLegAdditionalFeature];
export interface RouteOriginOptions {
  AvoidActionsForDistance?: number | undefined;
  AvoidUTurns?: boolean | undefined;
  Heading?: number | undefined;
  Matching?: RouteMatchingOptions | undefined;
  SideOfStreet?: RouteSideOfStreetOptions | undefined;
}
export declare const RouteSpanAdditionalFeature: {
  readonly BEST_CASE_DURATION: "BestCaseDuration";
  readonly CAR_ACCESS: "CarAccess";
  readonly CONSUMPTION: "Consumption";
  readonly COUNTRY: "Country";
  readonly DISTANCE: "Distance";
  readonly DURATION: "Duration";
  readonly DYNAMIC_SPEED: "DynamicSpeed";
  readonly FUNCTIONAL_CLASSIFICATION: "FunctionalClassification";
  readonly GATES: "Gates";
  readonly INCIDENTS: "Incidents";
  readonly NAMES: "Names";
  readonly NOTICES: "Notices";
  readonly PEDESTRIAN_ACCESS: "PedestrianAccess";
  readonly RAILWAY_CROSSINGS: "RailwayCrossings";
  readonly REGION: "Region";
  readonly ROAD_ATTRIBUTES: "RoadAttributes";
  readonly ROUTE_NUMBERS: "RouteNumbers";
  readonly SCOOTER_ACCESS: "ScooterAccess";
  readonly SPEED_LIMIT: "SpeedLimit";
  readonly TOLL_SYSTEMS: "TollSystems";
  readonly TRUCK_ACCESS: "TruckAccess";
  readonly TRUCK_ROAD_TYPES: "TruckRoadTypes";
  readonly TYPICAL_DURATION: "TypicalDuration";
  readonly ZONES: "Zones";
};
export type RouteSpanAdditionalFeature =
  (typeof RouteSpanAdditionalFeature)[keyof typeof RouteSpanAdditionalFeature];
export interface RouteEmissionType {
  Co2EmissionClass?: string | undefined;
  Type: string | undefined;
}
export declare const RouteTollVehicleCategory: {
  readonly MINIBUS: "Minibus";
};
export type RouteTollVehicleCategory =
  (typeof RouteTollVehicleCategory)[keyof typeof RouteTollVehicleCategory];
export interface RouteTollOptions {
  AllTransponders?: boolean | undefined;
  AllVignettes?: boolean | undefined;
  Currency?: string | undefined;
  EmissionType?: RouteEmissionType | undefined;
  VehicleCategory?: RouteTollVehicleCategory | undefined;
}
export interface RouteTrafficOptions {
  FlowEventThresholdOverride?: number | undefined;
  Usage?: TrafficUsage | undefined;
}
export declare const RouteTravelMode: {
  readonly CAR: "Car";
  readonly PEDESTRIAN: "Pedestrian";
  readonly SCOOTER: "Scooter";
  readonly TRUCK: "Truck";
};
export type RouteTravelMode =
  (typeof RouteTravelMode)[keyof typeof RouteTravelMode];
export declare const RouteEngineType: {
  readonly ELECTRIC: "Electric";
  readonly INTERNAL_COMBUSTION: "InternalCombustion";
  readonly PLUGIN_HYBRID: "PluginHybrid";
};
export type RouteEngineType =
  (typeof RouteEngineType)[keyof typeof RouteEngineType];
export interface RouteVehicleLicensePlate {
  LastCharacter?: string | undefined;
}
export interface RouteCarOptions {
  EngineType?: RouteEngineType | undefined;
  LicensePlate?: RouteVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
}
export interface RoutePedestrianOptions {
  Speed?: number | undefined;
}
export interface RouteScooterOptions {
  EngineType?: RouteEngineType | undefined;
  LicensePlate?: RouteVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
}
export declare const RouteHazardousCargoType: {
  readonly COMBUSTIBLE: "Combustible";
  readonly CORROSIVE: "Corrosive";
  readonly EXPLOSIVE: "Explosive";
  readonly FLAMMABLE: "Flammable";
  readonly GAS: "Gas";
  readonly HARMFUL_TO_WATER: "HarmfulToWater";
  readonly ORGANIC: "Organic";
  readonly OTHER: "Other";
  readonly POISON: "Poison";
  readonly POISONOUS_INHALATION: "PoisonousInhalation";
  readonly RADIOACTIVE: "Radioactive";
};
export type RouteHazardousCargoType =
  (typeof RouteHazardousCargoType)[keyof typeof RouteHazardousCargoType];
export interface RouteTrailerOptions {
  AxleCount?: number | undefined;
  TrailerCount?: number | undefined;
}
export declare const RouteTruckType: {
  readonly LIGHT_TRUCK: "LightTruck";
  readonly STRAIGHT_TRUCK: "StraightTruck";
  readonly TRACTOR: "Tractor";
};
export type RouteTruckType =
  (typeof RouteTruckType)[keyof typeof RouteTruckType];
export interface RouteTruckOptions {
  AxleCount?: number | undefined;
  EngineType?: RouteEngineType | undefined;
  GrossWeight?: number | undefined;
  HazardousCargos?: RouteHazardousCargoType[] | undefined;
  Height?: number | undefined;
  HeightAboveFirstAxle?: number | undefined;
  KpraLength?: number | undefined;
  Length?: number | undefined;
  LicensePlate?: RouteVehicleLicensePlate | undefined;
  MaxSpeed?: number | undefined;
  Occupancy?: number | undefined;
  PayloadCapacity?: number | undefined;
  TireCount?: number | undefined;
  Trailer?: RouteTrailerOptions | undefined;
  TruckType?: RouteTruckType | undefined;
  TunnelRestrictionCode?: string | undefined;
  WeightPerAxle?: number | undefined;
  WeightPerAxleGroup?: WeightPerAxleGroup | undefined;
  Width?: number | undefined;
}
export interface RouteTravelModeOptions {
  Car?: RouteCarOptions | undefined;
  Pedestrian?: RoutePedestrianOptions | undefined;
  Scooter?: RouteScooterOptions | undefined;
  Truck?: RouteTruckOptions | undefined;
}
export declare const RouteTravelStepType: {
  readonly DEFAULT: "Default";
  readonly TURN_BY_TURN: "TurnByTurn";
};
export type RouteTravelStepType =
  (typeof RouteTravelStepType)[keyof typeof RouteTravelStepType];
export interface RouteWaypoint {
  AvoidActionsForDistance?: number | undefined;
  AvoidUTurns?: boolean | undefined;
  Heading?: number | undefined;
  Matching?: RouteMatchingOptions | undefined;
  PassThrough?: boolean | undefined;
  Position: number[] | undefined;
  SideOfStreet?: RouteSideOfStreetOptions | undefined;
  StopDuration?: number | undefined;
}
export interface CalculateRoutesRequest {
  Allow?: RouteAllowOptions | undefined;
  ArrivalTime?: string | undefined;
  Avoid?: RouteAvoidanceOptions | undefined;
  DepartNow?: boolean | undefined;
  DepartureTime?: string | undefined;
  Destination: number[] | undefined;
  DestinationOptions?: RouteDestinationOptions | undefined;
  Driver?: RouteDriverOptions | undefined;
  Exclude?: RouteExclusionOptions | undefined;
  InstructionsMeasurementSystem?: MeasurementSystem | undefined;
  Key?: string | undefined;
  Languages?: string[] | undefined;
  LegAdditionalFeatures?: RouteLegAdditionalFeature[] | undefined;
  LegGeometryFormat?: GeometryFormat | undefined;
  MaxAlternatives?: number | undefined;
  OptimizeRoutingFor?: RoutingObjective | undefined;
  Origin: number[] | undefined;
  OriginOptions?: RouteOriginOptions | undefined;
  SpanAdditionalFeatures?: RouteSpanAdditionalFeature[] | undefined;
  Tolls?: RouteTollOptions | undefined;
  Traffic?: RouteTrafficOptions | undefined;
  TravelMode?: RouteTravelMode | undefined;
  TravelModeOptions?: RouteTravelModeOptions | undefined;
  TravelStepType?: RouteTravelStepType | undefined;
  Waypoints?: RouteWaypoint[] | undefined;
}
export declare const RouteResponseNoticeCode: {
  readonly MAIN_LANGUAGE_NOT_FOUND: "MainLanguageNotFound";
  readonly OTHER: "Other";
  readonly TRAVEL_TIME_EXCEEDS_DRIVER_WORK_HOURS: "TravelTimeExceedsDriverWorkHours";
};
export type RouteResponseNoticeCode =
  (typeof RouteResponseNoticeCode)[keyof typeof RouteResponseNoticeCode];
export declare const RouteNoticeImpact: {
  readonly HIGH: "High";
  readonly LOW: "Low";
};
export type RouteNoticeImpact =
  (typeof RouteNoticeImpact)[keyof typeof RouteNoticeImpact];
export interface RouteResponseNotice {
  Code: RouteResponseNoticeCode | undefined;
  Impact?: RouteNoticeImpact | undefined;
}
export declare const RouteFerryAfterTravelStepType: {
  readonly DEBOARD: "Deboard";
};
export type RouteFerryAfterTravelStepType =
  (typeof RouteFerryAfterTravelStepType)[keyof typeof RouteFerryAfterTravelStepType];
export interface RouteFerryAfterTravelStep {
  Duration: number | undefined;
  Instruction?: string | undefined;
  Type: RouteFerryAfterTravelStepType | undefined;
}
export interface RouteFerryPlace {
  Name?: string | undefined;
  OriginalPosition?: number[] | undefined;
  Position: number[] | undefined;
  WaypointIndex?: number | undefined;
}
export interface RouteFerryArrival {
  Place: RouteFerryPlace | undefined;
  Time?: string | undefined;
}
export declare const RouteFerryBeforeTravelStepType: {
  readonly BOARD: "Board";
};
export type RouteFerryBeforeTravelStepType =
  (typeof RouteFerryBeforeTravelStepType)[keyof typeof RouteFerryBeforeTravelStepType];
export interface RouteFerryBeforeTravelStep {
  Duration: number | undefined;
  Instruction?: string | undefined;
  Type: RouteFerryBeforeTravelStepType | undefined;
}
export interface RouteFerryDeparture {
  Place: RouteFerryPlace | undefined;
  Time?: string | undefined;
}
export declare const RouteFerryNoticeCode: {
  readonly ACCURATE_POLYLINE_UNAVAILABLE: "AccuratePolylineUnavailable";
  readonly NO_SCHEDULE: "NoSchedule";
  readonly OTHER: "Other";
  readonly SEASONAL_CLOSURE: "SeasonalClosure";
  readonly VIOLATED_AVOID_FERRY: "ViolatedAvoidFerry";
  readonly VIOLATED_AVOID_RAIL_FERRY: "ViolatedAvoidRailFerry";
};
export type RouteFerryNoticeCode =
  (typeof RouteFerryNoticeCode)[keyof typeof RouteFerryNoticeCode];
export interface RouteFerryNotice {
  Code: RouteFerryNoticeCode | undefined;
  Impact?: RouteNoticeImpact | undefined;
}
export interface RoutePassThroughPlace {
  OriginalPosition?: number[] | undefined;
  Position: number[] | undefined;
  WaypointIndex?: number | undefined;
}
export interface RoutePassThroughWaypoint {
  GeometryOffset?: number | undefined;
  Place: RoutePassThroughPlace | undefined;
}
export interface LocalizedString {
  Language?: string | undefined;
  Value: string | undefined;
}
export interface RouteFerrySpan {
  Country?: string | undefined;
  Distance?: number | undefined;
  Duration?: number | undefined;
  GeometryOffset?: number | undefined;
  Names?: LocalizedString[] | undefined;
  Region?: string | undefined;
}
export interface RouteFerryOverviewSummary {
  Distance: number | undefined;
  Duration: number | undefined;
}
export interface RouteFerryTravelOnlySummary {
  Duration: number | undefined;
}
export interface RouteFerrySummary {
  Overview?: RouteFerryOverviewSummary | undefined;
  TravelOnly?: RouteFerryTravelOnlySummary | undefined;
}
export declare const RouteFerryTravelStepType: {
  readonly ARRIVE: "Arrive";
  readonly CONTINUE: "Continue";
  readonly DEPART: "Depart";
};
export type RouteFerryTravelStepType =
  (typeof RouteFerryTravelStepType)[keyof typeof RouteFerryTravelStepType];
export interface RouteFerryTravelStep {
  Distance?: number | undefined;
  Duration: number | undefined;
  GeometryOffset?: number | undefined;
  Instruction?: string | undefined;
  Type: RouteFerryTravelStepType | undefined;
}
export interface RouteFerryLegDetails {
  AfterTravelSteps: RouteFerryAfterTravelStep[] | undefined;
  Arrival: RouteFerryArrival | undefined;
  BeforeTravelSteps: RouteFerryBeforeTravelStep[] | undefined;
  Departure: RouteFerryDeparture | undefined;
  Notices: RouteFerryNotice[] | undefined;
  PassThroughWaypoints: RoutePassThroughWaypoint[] | undefined;
  RouteName?: string | undefined;
  Spans: RouteFerrySpan[] | undefined;
  Summary?: RouteFerrySummary | undefined;
  TravelSteps: RouteFerryTravelStep[] | undefined;
}
export interface RouteLegGeometry {
  LineString?: number[][] | undefined;
  Polyline?: string | undefined;
}
export declare const RouteSideOfStreet: {
  readonly LEFT: "Left";
  readonly RIGHT: "Right";
};
export type RouteSideOfStreet =
  (typeof RouteSideOfStreet)[keyof typeof RouteSideOfStreet];
export interface RoutePedestrianPlace {
  Name?: string | undefined;
  OriginalPosition?: number[] | undefined;
  Position: number[] | undefined;
  SideOfStreet?: RouteSideOfStreet | undefined;
  WaypointIndex?: number | undefined;
}
export interface RoutePedestrianArrival {
  Place: RoutePedestrianPlace | undefined;
  Time?: string | undefined;
}
export interface RoutePedestrianDeparture {
  Place: RoutePedestrianPlace | undefined;
  Time?: string | undefined;
}
export declare const RoutePedestrianNoticeCode: {
  readonly ACCURATE_POLYLINE_UNAVAILABLE: "AccuratePolylineUnavailable";
  readonly OTHER: "Other";
  readonly VIOLATED_AVOID_DIRT_ROAD: "ViolatedAvoidDirtRoad";
  readonly VIOLATED_AVOID_TUNNEL: "ViolatedAvoidTunnel";
  readonly VIOLATED_PEDESTRIAN_OPTION: "ViolatedPedestrianOption";
};
export type RoutePedestrianNoticeCode =
  (typeof RoutePedestrianNoticeCode)[keyof typeof RoutePedestrianNoticeCode];
export interface RoutePedestrianNotice {
  Code: RoutePedestrianNoticeCode | undefined;
  Impact?: RouteNoticeImpact | undefined;
}
export interface RouteSpanDynamicSpeedDetails {
  BestCaseSpeed?: number | undefined;
  TurnDuration?: number | undefined;
  TypicalSpeed?: number | undefined;
}
export declare const RouteSpanPedestrianAccessAttribute: {
  readonly ALLOWED: "Allowed";
  readonly INDOORS: "Indoors";
  readonly NO_THROUGH_TRAFFIC: "NoThroughTraffic";
  readonly PARK: "Park";
  readonly STAIRS: "Stairs";
  readonly TOLL_ROAD: "TollRoad";
};
export type RouteSpanPedestrianAccessAttribute =
  (typeof RouteSpanPedestrianAccessAttribute)[keyof typeof RouteSpanPedestrianAccessAttribute];
export declare const RouteSpanRoadAttribute: {
  readonly BRIDGE: "Bridge";
  readonly BUILT_UP_AREA: "BuiltUpArea";
  readonly CONTROLLED_ACCESS_HIGHWAY: "ControlledAccessHighway";
  readonly DIRT_ROAD: "DirtRoad";
  readonly DIVIDED_ROAD: "DividedRoad";
  readonly MOTORWAY: "Motorway";
  readonly PRIVATE_ROAD: "PrivateRoad";
  readonly RAMP: "Ramp";
  readonly RIGHT_HAND_TRAFFIC: "RightHandTraffic";
  readonly ROUNDABOUT: "Roundabout";
  readonly TUNNEL: "Tunnel";
  readonly UNDER_CONSTRUCTION: "UnderConstruction";
};
export type RouteSpanRoadAttribute =
  (typeof RouteSpanRoadAttribute)[keyof typeof RouteSpanRoadAttribute];
export declare const RouteDirection: {
  readonly EAST: "East";
  readonly NORTH: "North";
  readonly SOUTH: "South";
  readonly WEST: "West";
};
export type RouteDirection =
  (typeof RouteDirection)[keyof typeof RouteDirection];
export interface RouteNumber {
  Direction?: RouteDirection | undefined;
  Language?: string | undefined;
  Value: string | undefined;
}
export interface RouteSpanSpeedLimitDetails {
  MaxSpeed?: number | undefined;
  Unlimited?: boolean | undefined;
}
export interface RoutePedestrianSpan {
  BestCaseDuration?: number | undefined;
  Country?: string | undefined;
  Distance?: number | undefined;
  Duration?: number | undefined;
  DynamicSpeed?: RouteSpanDynamicSpeedDetails | undefined;
  FunctionalClassification?: number | undefined;
  GeometryOffset?: number | undefined;
  Incidents?: number[] | undefined;
  Names?: LocalizedString[] | undefined;
  PedestrianAccess?: RouteSpanPedestrianAccessAttribute[] | undefined;
  Region?: string | undefined;
  RoadAttributes?: RouteSpanRoadAttribute[] | undefined;
  RouteNumbers?: RouteNumber[] | undefined;
  SpeedLimit?: RouteSpanSpeedLimitDetails | undefined;
  TypicalDuration?: number | undefined;
}
export interface RoutePedestrianOverviewSummary {
  Distance: number | undefined;
  Duration: number | undefined;
}
export interface RoutePedestrianTravelOnlySummary {
  Duration: number | undefined;
}
export interface RoutePedestrianSummary {
  Overview?: RoutePedestrianOverviewSummary | undefined;
  TravelOnly?: RoutePedestrianTravelOnlySummary | undefined;
}
export interface RouteContinueStepDetails {
  Intersection: LocalizedString[] | undefined;
}
export declare const RouteRoadType: {
  readonly HIGHWAY: "Highway";
  readonly RURAL: "Rural";
  readonly URBAN: "Urban";
};
export type RouteRoadType = (typeof RouteRoadType)[keyof typeof RouteRoadType];
export interface RouteRoad {
  RoadName: LocalizedString[] | undefined;
  RouteNumber: RouteNumber[] | undefined;
  Towards: LocalizedString[] | undefined;
  Type?: RouteRoadType | undefined;
}
export declare const RouteSteeringDirection: {
  readonly LEFT: "Left";
  readonly RIGHT: "Right";
  readonly STRAIGHT: "Straight";
};
export type RouteSteeringDirection =
  (typeof RouteSteeringDirection)[keyof typeof RouteSteeringDirection];
export declare const RouteTurnIntensity: {
  readonly SHARP: "Sharp";
  readonly SLIGHT: "Slight";
  readonly TYPICAL: "Typical";
};
export type RouteTurnIntensity =
  (typeof RouteTurnIntensity)[keyof typeof RouteTurnIntensity];
export interface RouteKeepStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export interface RouteRoundaboutEnterStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export interface RouteRoundaboutExitStepDetails {
  Intersection: LocalizedString[] | undefined;
  RelativeExit?: number | undefined;
  RoundaboutAngle?: number | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
}
export interface RouteRoundaboutPassStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export interface RouteSignpostLabel {
  RouteNumber?: RouteNumber | undefined;
  Text?: LocalizedString | undefined;
}
export interface RouteSignpost {
  Labels: RouteSignpostLabel[] | undefined;
}
export interface RouteTurnStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export declare const RoutePedestrianTravelStepType: {
  readonly ARRIVE: "Arrive";
  readonly CONTINUE: "Continue";
  readonly DEPART: "Depart";
  readonly EXIT: "Exit";
  readonly KEEP: "Keep";
  readonly RAMP: "Ramp";
  readonly ROUNDABOUT_ENTER: "RoundaboutEnter";
  readonly ROUNDABOUT_EXIT: "RoundaboutExit";
  readonly ROUNDABOUT_PASS: "RoundaboutPass";
  readonly TURN: "Turn";
  readonly U_TURN: "UTurn";
};
export type RoutePedestrianTravelStepType =
  (typeof RoutePedestrianTravelStepType)[keyof typeof RoutePedestrianTravelStepType];
export interface RoutePedestrianTravelStep {
  ContinueStepDetails?: RouteContinueStepDetails | undefined;
  CurrentRoad?: RouteRoad | undefined;
  Distance?: number | undefined;
  Duration: number | undefined;
  ExitNumber?: LocalizedString[] | undefined;
  GeometryOffset?: number | undefined;
  Instruction?: string | undefined;
  KeepStepDetails?: RouteKeepStepDetails | undefined;
  NextRoad?: RouteRoad | undefined;
  RoundaboutEnterStepDetails?: RouteRoundaboutEnterStepDetails | undefined;
  RoundaboutExitStepDetails?: RouteRoundaboutExitStepDetails | undefined;
  RoundaboutPassStepDetails?: RouteRoundaboutPassStepDetails | undefined;
  Signpost?: RouteSignpost | undefined;
  TurnStepDetails?: RouteTurnStepDetails | undefined;
  Type: RoutePedestrianTravelStepType | undefined;
}
export interface RoutePedestrianLegDetails {
  Arrival: RoutePedestrianArrival | undefined;
  Departure: RoutePedestrianDeparture | undefined;
  Notices: RoutePedestrianNotice[] | undefined;
  PassThroughWaypoints: RoutePassThroughWaypoint[] | undefined;
  Spans: RoutePedestrianSpan[] | undefined;
  Summary?: RoutePedestrianSummary | undefined;
  TravelSteps: RoutePedestrianTravelStep[] | undefined;
}
export declare const RouteLegTravelMode: {
  readonly CAR: "Car";
  readonly CAR_SHUTTLE_TRAIN: "CarShuttleTrain";
  readonly FERRY: "Ferry";
  readonly PEDESTRIAN: "Pedestrian";
  readonly SCOOTER: "Scooter";
  readonly TRUCK: "Truck";
};
export type RouteLegTravelMode =
  (typeof RouteLegTravelMode)[keyof typeof RouteLegTravelMode];
export declare const RouteLegType: {
  readonly FERRY: "Ferry";
  readonly PEDESTRIAN: "Pedestrian";
  readonly VEHICLE: "Vehicle";
};
export type RouteLegType = (typeof RouteLegType)[keyof typeof RouteLegType];
export interface RouteVehiclePlace {
  Name?: string | undefined;
  OriginalPosition?: number[] | undefined;
  Position: number[] | undefined;
  SideOfStreet?: RouteSideOfStreet | undefined;
  WaypointIndex?: number | undefined;
}
export interface RouteVehicleArrival {
  Place: RouteVehiclePlace | undefined;
  Time?: string | undefined;
}
export interface RouteVehicleDeparture {
  Place: RouteVehiclePlace | undefined;
  Time?: string | undefined;
}
export declare const RouteVehicleIncidentSeverity: {
  readonly CRITICAL: "Critical";
  readonly HIGH: "High";
  readonly LOW: "Low";
  readonly MEDIUM: "Medium";
};
export type RouteVehicleIncidentSeverity =
  (typeof RouteVehicleIncidentSeverity)[keyof typeof RouteVehicleIncidentSeverity];
export declare const RouteVehicleIncidentType: {
  readonly ACCIDENT: "Accident";
  readonly CONGESTION: "Congestion";
  readonly CONSTRUCTION: "Construction";
  readonly DISABLED_VEHICLE: "DisabledVehicle";
  readonly LANE_RESTRICTION: "LaneRestriction";
  readonly MASS_TRANSIT: "MassTransit";
  readonly OTHER: "Other";
  readonly PLANNED_EVENT: "PlannedEvent";
  readonly ROAD_CLOSURE: "RoadClosure";
  readonly ROAD_HAZARD: "RoadHazard";
  readonly WEATHER: "Weather";
};
export type RouteVehicleIncidentType =
  (typeof RouteVehicleIncidentType)[keyof typeof RouteVehicleIncidentType];
export interface RouteVehicleIncident {
  Description?: string | undefined;
  EndTime?: string | undefined;
  Severity?: RouteVehicleIncidentSeverity | undefined;
  StartTime?: string | undefined;
  Type?: RouteVehicleIncidentType | undefined;
}
export declare const RouteVehicleNoticeCode: {
  readonly ACCURATE_POLYLINE_UNAVAILABLE: "AccuratePolylineUnavailable";
  readonly OTHER: "Other";
  readonly POTENTIAL_VIOLATED_AVOID_TOLL_ROAD_USAGE: "PotentialViolatedAvoidTollRoadUsage";
  readonly POTENTIAL_VIOLATED_CARPOOL_USAGE: "PotentialViolatedCarpoolUsage";
  readonly POTENTIAL_VIOLATED_TURN_RESTRICTION_USAGE: "PotentialViolatedTurnRestrictionUsage";
  readonly POTENTIAL_VIOLATED_VEHICLE_RESTRICTION_USAGE: "PotentialViolatedVehicleRestrictionUsage";
  readonly POTENTIAL_VIOLATED_ZONE_RESTRICTION_USAGE: "PotentialViolatedZoneRestrictionUsage";
  readonly SEASONAL_CLOSURE: "SeasonalClosure";
  readonly TOLLS_DATA_TEMPORARILY_UNAVAILABLE: "TollsDataTemporarilyUnavailable";
  readonly TOLLS_DATA_UNAVAILABLE: "TollsDataUnavailable";
  readonly TOLL_TRANSPONDER: "TollTransponder";
  readonly VIOLATED_AVOID_CONTROLLED_ACCESS_HIGHWAY: "ViolatedAvoidControlledAccessHighway";
  readonly VIOLATED_AVOID_DIFFICULT_TURNS: "ViolatedAvoidDifficultTurns";
  readonly VIOLATED_AVOID_DIRT_ROAD: "ViolatedAvoidDirtRoad";
  readonly VIOLATED_AVOID_SEASONAL_CLOSURE: "ViolatedAvoidSeasonalClosure";
  readonly VIOLATED_AVOID_TOLL_ROAD: "ViolatedAvoidTollRoad";
  readonly VIOLATED_AVOID_TOLL_TRANSPONDER: "ViolatedAvoidTollTransponder";
  readonly VIOLATED_AVOID_TRUCK_ROAD_TYPE: "ViolatedAvoidTruckRoadType";
  readonly VIOLATED_AVOID_TUNNEL: "ViolatedAvoidTunnel";
  readonly VIOLATED_AVOID_U_TURNS: "ViolatedAvoidUTurns";
  readonly VIOLATED_BLOCKED_ROAD: "ViolatedBlockedRoad";
  readonly VIOLATED_CARPOOL: "ViolatedCarpool";
  readonly VIOLATED_EMERGENCY_GATE: "ViolatedEmergencyGate";
  readonly VIOLATED_START_DIRECTION: "ViolatedStartDirection";
  readonly VIOLATED_TURN_RESTRICTION: "ViolatedTurnRestriction";
  readonly VIOLATED_VEHICLE_RESTRICTION: "ViolatedVehicleRestriction";
  readonly VIOLATED_ZONE_RESTRICTION: "ViolatedZoneRestriction";
};
export type RouteVehicleNoticeCode =
  (typeof RouteVehicleNoticeCode)[keyof typeof RouteVehicleNoticeCode];
export interface RouteNoticeDetailRange {
  Min?: number | undefined;
  Max?: number | undefined;
}
export declare const RouteWeightConstraintType: {
  readonly CURRENT: "Current";
  readonly GROSS: "Gross";
  readonly UNKNOWN: "Unknown";
};
export type RouteWeightConstraintType =
  (typeof RouteWeightConstraintType)[keyof typeof RouteWeightConstraintType];
export interface RouteWeightConstraint {
  Type: RouteWeightConstraintType | undefined;
  Value: number | undefined;
}
export interface RouteViolatedConstraints {
  AllHazardsRestricted?: boolean | undefined;
  AxleCount?: RouteNoticeDetailRange | undefined;
  HazardousCargos: RouteHazardousCargoType[] | undefined;
  MaxHeight?: number | undefined;
  MaxKpraLength?: number | undefined;
  MaxLength?: number | undefined;
  MaxPayloadCapacity?: number | undefined;
  MaxWeight?: RouteWeightConstraint | undefined;
  MaxWeightPerAxle?: number | undefined;
  MaxWeightPerAxleGroup?: WeightPerAxleGroup | undefined;
  MaxWidth?: number | undefined;
  Occupancy?: RouteNoticeDetailRange | undefined;
  RestrictedTimes?: string | undefined;
  TimeDependent?: boolean | undefined;
  TrailerCount?: RouteNoticeDetailRange | undefined;
  TravelMode?: boolean | undefined;
  TruckRoadType?: string | undefined;
  TruckType?: RouteTruckType | undefined;
  TunnelRestrictionCode?: string | undefined;
}
export interface RouteVehicleNoticeDetail {
  Title?: string | undefined;
  ViolatedConstraints?: RouteViolatedConstraints | undefined;
}
export interface RouteVehicleNotice {
  Code: RouteVehicleNoticeCode | undefined;
  Details: RouteVehicleNoticeDetail[] | undefined;
  Impact?: RouteNoticeImpact | undefined;
}
export declare const RouteSpanCarAccessAttribute: {
  readonly ALLOWED: "Allowed";
  readonly NO_THROUGH_TRAFFIC: "NoThroughTraffic";
  readonly TOLL_ROAD: "TollRoad";
};
export type RouteSpanCarAccessAttribute =
  (typeof RouteSpanCarAccessAttribute)[keyof typeof RouteSpanCarAccessAttribute];
export declare const RouteSpanGateAttribute: {
  readonly EMERGENCY: "Emergency";
  readonly KEY_ACCESS: "KeyAccess";
  readonly PERMISSION_REQUIRED: "PermissionRequired";
};
export type RouteSpanGateAttribute =
  (typeof RouteSpanGateAttribute)[keyof typeof RouteSpanGateAttribute];
export declare const RouteSpanRailwayCrossingAttribute: {
  readonly PROTECTED: "Protected";
  readonly UNPROTECTED: "Unprotected";
};
export type RouteSpanRailwayCrossingAttribute =
  (typeof RouteSpanRailwayCrossingAttribute)[keyof typeof RouteSpanRailwayCrossingAttribute];
export declare const RouteSpanScooterAccessAttribute: {
  readonly ALLOWED: "Allowed";
  readonly NO_THROUGH_TRAFFIC: "NoThroughTraffic";
  readonly TOLL_ROAD: "TollRoad";
};
export type RouteSpanScooterAccessAttribute =
  (typeof RouteSpanScooterAccessAttribute)[keyof typeof RouteSpanScooterAccessAttribute];
export declare const RouteSpanTruckAccessAttribute: {
  readonly ALLOWED: "Allowed";
  readonly NO_THROUGH_TRAFFIC: "NoThroughTraffic";
  readonly TOLL_ROAD: "TollRoad";
};
export type RouteSpanTruckAccessAttribute =
  (typeof RouteSpanTruckAccessAttribute)[keyof typeof RouteSpanTruckAccessAttribute];
export interface RouteVehicleSpan {
  BestCaseDuration?: number | undefined;
  CarAccess?: RouteSpanCarAccessAttribute[] | undefined;
  Country?: string | undefined;
  Distance?: number | undefined;
  Duration?: number | undefined;
  DynamicSpeed?: RouteSpanDynamicSpeedDetails | undefined;
  FunctionalClassification?: number | undefined;
  Gate?: RouteSpanGateAttribute | undefined;
  GeometryOffset?: number | undefined;
  Incidents?: number[] | undefined;
  Names?: LocalizedString[] | undefined;
  Notices?: number[] | undefined;
  RailwayCrossing?: RouteSpanRailwayCrossingAttribute | undefined;
  Region?: string | undefined;
  RoadAttributes?: RouteSpanRoadAttribute[] | undefined;
  RouteNumbers?: RouteNumber[] | undefined;
  ScooterAccess?: RouteSpanScooterAccessAttribute[] | undefined;
  SpeedLimit?: RouteSpanSpeedLimitDetails | undefined;
  TollSystems?: number[] | undefined;
  TruckAccess?: RouteSpanTruckAccessAttribute[] | undefined;
  TruckRoadTypes?: number[] | undefined;
  TypicalDuration?: number | undefined;
  Zones?: number[] | undefined;
}
export interface RouteVehicleOverviewSummary {
  BestCaseDuration?: number | undefined;
  Distance: number | undefined;
  Duration: number | undefined;
  TypicalDuration?: number | undefined;
}
export interface RouteVehicleTravelOnlySummary {
  BestCaseDuration?: number | undefined;
  Duration: number | undefined;
  TypicalDuration?: number | undefined;
}
export interface RouteVehicleSummary {
  Overview?: RouteVehicleOverviewSummary | undefined;
  TravelOnly?: RouteVehicleTravelOnlySummary | undefined;
}
export interface RouteTollPaymentSite {
  Name?: string | undefined;
  Position: number[] | undefined;
}
export interface RouteTollPriceValueRange {
  Min: number | undefined;
  Max: number | undefined;
}
export interface RouteTollPrice {
  Currency: string | undefined;
  Estimate: boolean | undefined;
  PerDuration?: number | undefined;
  Range: boolean | undefined;
  RangeValue?: RouteTollPriceValueRange | undefined;
  Value: number | undefined;
}
export declare const RouteTollPassValidityPeriodType: {
  readonly ANNUAL: "Annual";
  readonly DAYS: "Days";
  readonly EXTENDED_ANNUAL: "ExtendedAnnual";
  readonly MINUTES: "Minutes";
  readonly MONTHS: "Months";
};
export type RouteTollPassValidityPeriodType =
  (typeof RouteTollPassValidityPeriodType)[keyof typeof RouteTollPassValidityPeriodType];
export interface RouteTollPassValidityPeriod {
  Period: RouteTollPassValidityPeriodType | undefined;
  PeriodCount?: number | undefined;
}
export interface RouteTollPass {
  IncludesReturnTrip?: boolean | undefined;
  SeniorPass?: boolean | undefined;
  TransferCount?: number | undefined;
  TripCount?: number | undefined;
  ValidityPeriod?: RouteTollPassValidityPeriod | undefined;
}
export declare const RouteTollPaymentMethod: {
  readonly BANK_CARD: "BankCard";
  readonly CASH: "Cash";
  readonly CASH_EXACT: "CashExact";
  readonly CREDIT_CARD: "CreditCard";
  readonly PASS_SUBSCRIPTION: "PassSubscription";
  readonly TRANSPONDER: "Transponder";
  readonly TRAVEL_CARD: "TravelCard";
  readonly VIDEO_TOLL: "VideoToll";
};
export type RouteTollPaymentMethod =
  (typeof RouteTollPaymentMethod)[keyof typeof RouteTollPaymentMethod];
export interface RouteTransponder {
  SystemName?: string | undefined;
}
export interface RouteTollRate {
  ApplicableTimes?: string | undefined;
  ConvertedPrice?: RouteTollPrice | undefined;
  Id: string | undefined;
  LocalPrice: RouteTollPrice | undefined;
  Name: string | undefined;
  Pass?: RouteTollPass | undefined;
  PaymentMethods: RouteTollPaymentMethod[] | undefined;
  Transponders: RouteTransponder[] | undefined;
}
export interface RouteToll {
  Country?: string | undefined;
  PaymentSites: RouteTollPaymentSite[] | undefined;
  Rates: RouteTollRate[] | undefined;
  Systems: number[] | undefined;
}
export interface RouteTollSystem {
  Name?: string | undefined;
}
export interface RouteContinueHighwayStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export interface RouteEnterHighwayStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export interface RouteExitStepDetails {
  Intersection: LocalizedString[] | undefined;
  RelativeExit?: number | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export interface RouteRampStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export declare const RouteVehicleTravelStepType: {
  readonly ARRIVE: "Arrive";
  readonly CONTINUE: "Continue";
  readonly CONTINUE_HIGHWAY: "ContinueHighway";
  readonly DEPART: "Depart";
  readonly ENTER_HIGHWAY: "EnterHighway";
  readonly EXIT: "Exit";
  readonly KEEP: "Keep";
  readonly RAMP: "Ramp";
  readonly ROUNDABOUT_ENTER: "RoundaboutEnter";
  readonly ROUNDABOUT_EXIT: "RoundaboutExit";
  readonly ROUNDABOUT_PASS: "RoundaboutPass";
  readonly TURN: "Turn";
  readonly U_TURN: "UTurn";
};
export type RouteVehicleTravelStepType =
  (typeof RouteVehicleTravelStepType)[keyof typeof RouteVehicleTravelStepType];
export interface RouteUTurnStepDetails {
  Intersection: LocalizedString[] | undefined;
  SteeringDirection?: RouteSteeringDirection | undefined;
  TurnAngle?: number | undefined;
  TurnIntensity?: RouteTurnIntensity | undefined;
}
export interface RouteVehicleTravelStep {
  ContinueHighwayStepDetails?: RouteContinueHighwayStepDetails | undefined;
  ContinueStepDetails?: RouteContinueStepDetails | undefined;
  CurrentRoad?: RouteRoad | undefined;
  Distance?: number | undefined;
  Duration: number | undefined;
  EnterHighwayStepDetails?: RouteEnterHighwayStepDetails | undefined;
  ExitNumber?: LocalizedString[] | undefined;
  ExitStepDetails?: RouteExitStepDetails | undefined;
  GeometryOffset?: number | undefined;
  Instruction?: string | undefined;
  KeepStepDetails?: RouteKeepStepDetails | undefined;
  NextRoad?: RouteRoad | undefined;
  RampStepDetails?: RouteRampStepDetails | undefined;
  RoundaboutEnterStepDetails?: RouteRoundaboutEnterStepDetails | undefined;
  RoundaboutExitStepDetails?: RouteRoundaboutExitStepDetails | undefined;
  RoundaboutPassStepDetails?: RouteRoundaboutPassStepDetails | undefined;
  Signpost?: RouteSignpost | undefined;
  TurnStepDetails?: RouteTurnStepDetails | undefined;
  Type: RouteVehicleTravelStepType | undefined;
  UTurnStepDetails?: RouteUTurnStepDetails | undefined;
}
export interface RouteZone {
  Category?: RouteZoneCategory | undefined;
  Name?: string | undefined;
}
export interface RouteVehicleLegDetails {
  Arrival: RouteVehicleArrival | undefined;
  Departure: RouteVehicleDeparture | undefined;
  Incidents: RouteVehicleIncident[] | undefined;
  Notices: RouteVehicleNotice[] | undefined;
  PassThroughWaypoints: RoutePassThroughWaypoint[] | undefined;
  Spans: RouteVehicleSpan[] | undefined;
  Summary?: RouteVehicleSummary | undefined;
  Tolls: RouteToll[] | undefined;
  TollSystems: RouteTollSystem[] | undefined;
  TravelSteps: RouteVehicleTravelStep[] | undefined;
  TruckRoadTypes: string[] | undefined;
  Zones: RouteZone[] | undefined;
}
export interface RouteLeg {
  FerryLegDetails?: RouteFerryLegDetails | undefined;
  Geometry: RouteLegGeometry | undefined;
  Language?: string | undefined;
  PedestrianLegDetails?: RoutePedestrianLegDetails | undefined;
  TravelMode: RouteLegTravelMode | undefined;
  Type: RouteLegType | undefined;
  VehicleLegDetails?: RouteVehicleLegDetails | undefined;
}
export interface RouteMajorRoadLabel {
  RoadName?: LocalizedString | undefined;
  RouteNumber?: RouteNumber | undefined;
}
export interface RouteTollPriceSummary {
  Currency: string | undefined;
  Estimate: boolean | undefined;
  Range: boolean | undefined;
  RangeValue?: RouteTollPriceValueRange | undefined;
  Value: number | undefined;
}
export interface RouteTollSummary {
  Total?: RouteTollPriceSummary | undefined;
}
export interface RouteSummary {
  Distance?: number | undefined;
  Duration?: number | undefined;
  Tolls?: RouteTollSummary | undefined;
}
export interface Route {
  Legs: RouteLeg[] | undefined;
  MajorRoadLabels: RouteMajorRoadLabel[] | undefined;
  Summary?: RouteSummary | undefined;
}
export interface CalculateRoutesResponse {
  LegGeometryFormat: GeometryFormat | undefined;
  Notices: RouteResponseNotice[] | undefined;
  PricingBucket: string | undefined;
  Routes: Route[] | undefined;
}
export declare const DayOfWeek: {
  readonly FRIDAY: "Friday";
  readonly MONDAY: "Monday";
  readonly SATURDAY: "Saturday";
  readonly SUNDAY: "Sunday";
  readonly THURSDAY: "Thursday";
  readonly TUESDAY: "Tuesday";
  readonly WEDNESDAY: "Wednesday";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export interface WaypointOptimizationAvoidanceAreaGeometry {
  BoundingBox?: number[] | undefined;
}
export interface WaypointOptimizationAvoidanceArea {
  Geometry: WaypointOptimizationAvoidanceAreaGeometry | undefined;
}
export interface WaypointOptimizationAvoidanceOptions {
  Areas?: WaypointOptimizationAvoidanceArea[] | undefined;
  CarShuttleTrains?: boolean | undefined;
  ControlledAccessHighways?: boolean | undefined;
  DirtRoads?: boolean | undefined;
  Ferries?: boolean | undefined;
  TollRoads?: boolean | undefined;
  Tunnels?: boolean | undefined;
  UTurns?: boolean | undefined;
}
export declare const WaypointOptimizationClusteringAlgorithm: {
  readonly DRIVING_DISTANCE: "DrivingDistance";
  readonly TOPOLOGY_SEGMENT: "TopologySegment";
};
export type WaypointOptimizationClusteringAlgorithm =
  (typeof WaypointOptimizationClusteringAlgorithm)[keyof typeof WaypointOptimizationClusteringAlgorithm];
export interface WaypointOptimizationDrivingDistanceOptions {
  DrivingDistance: number | undefined;
}
export interface WaypointOptimizationClusteringOptions {
  Algorithm: WaypointOptimizationClusteringAlgorithm | undefined;
  DrivingDistanceOptions?:
    | WaypointOptimizationDrivingDistanceOptions
    | undefined;
}
export interface WaypointOptimizationAccessHoursEntry {
  DayOfWeek: DayOfWeek | undefined;
  TimeOfDay: string | undefined;
}
export interface WaypointOptimizationAccessHours {
  From: WaypointOptimizationAccessHoursEntry | undefined;
  To: WaypointOptimizationAccessHoursEntry | undefined;
}
export interface WaypointOptimizationSideOfStreetOptions {
  Position: number[] | undefined;
  UseWith?: SideOfStreetMatchingStrategy | undefined;
}
export interface WaypointOptimizationDestinationOptions {
  AccessHours?: WaypointOptimizationAccessHours | undefined;
  AppointmentTime?: string | undefined;
  Heading?: number | undefined;
  Id?: string | undefined;
  ServiceDuration?: number | undefined;
  SideOfStreet?: WaypointOptimizationSideOfStreetOptions | undefined;
}
export interface WaypointOptimizationRestCycleDurations {
  RestDuration: number | undefined;
  WorkDuration: number | undefined;
}
export interface WaypointOptimizationRestCycles {
  LongCycle: WaypointOptimizationRestCycleDurations | undefined;
  ShortCycle: WaypointOptimizationRestCycleDurations | undefined;
}
export interface WaypointOptimizationRestProfile {
  Profile: string | undefined;
}
export declare const WaypointOptimizationServiceTimeTreatment: {
  readonly REST: "Rest";
  readonly WORK: "Work";
};
export type WaypointOptimizationServiceTimeTreatment =
  (typeof WaypointOptimizationServiceTimeTreatment)[keyof typeof WaypointOptimizationServiceTimeTreatment];
export interface WaypointOptimizationDriverOptions {
  RestCycles?: WaypointOptimizationRestCycles | undefined;
  RestProfile?: WaypointOptimizationRestProfile | undefined;
  TreatServiceTimeAs?: WaypointOptimizationServiceTimeTreatment | undefined;
}
export interface WaypointOptimizationExclusionOptions {
  Countries: string[] | undefined;
}
export declare const WaypointOptimizationSequencingObjective: {
  readonly FASTEST_ROUTE: "FastestRoute";
  readonly SHORTEST_ROUTE: "ShortestRoute";
};
export type WaypointOptimizationSequencingObjective =
  (typeof WaypointOptimizationSequencingObjective)[keyof typeof WaypointOptimizationSequencingObjective];
export interface WaypointOptimizationOriginOptions {
  Id?: string | undefined;
}
export interface WaypointOptimizationTrafficOptions {
  Usage?: TrafficUsage | undefined;
}
export declare const WaypointOptimizationTravelMode: {
  readonly CAR: "Car";
  readonly PEDESTRIAN: "Pedestrian";
  readonly SCOOTER: "Scooter";
  readonly TRUCK: "Truck";
};
export type WaypointOptimizationTravelMode =
  (typeof WaypointOptimizationTravelMode)[keyof typeof WaypointOptimizationTravelMode];
export interface WaypointOptimizationPedestrianOptions {
  Speed?: number | undefined;
}
export declare const WaypointOptimizationHazardousCargoType: {
  readonly COMBUSTIBLE: "Combustible";
  readonly CORROSIVE: "Corrosive";
  readonly EXPLOSIVE: "Explosive";
  readonly FLAMMABLE: "Flammable";
  readonly GAS: "Gas";
  readonly HARMFUL_TO_WATER: "HarmfulToWater";
  readonly ORGANIC: "Organic";
  readonly OTHER: "Other";
  readonly POISON: "Poison";
  readonly POISONOUS_INHALATION: "PoisonousInhalation";
  readonly RADIOACTIVE: "Radioactive";
};
export type WaypointOptimizationHazardousCargoType =
  (typeof WaypointOptimizationHazardousCargoType)[keyof typeof WaypointOptimizationHazardousCargoType];
export interface WaypointOptimizationTrailerOptions {
  TrailerCount?: number | undefined;
}
export declare const WaypointOptimizationTruckType: {
  readonly STRAIGHT_TRUCK: "StraightTruck";
  readonly TRACTOR: "Tractor";
};
export type WaypointOptimizationTruckType =
  (typeof WaypointOptimizationTruckType)[keyof typeof WaypointOptimizationTruckType];
export interface WaypointOptimizationTruckOptions {
  GrossWeight?: number | undefined;
  HazardousCargos?: WaypointOptimizationHazardousCargoType[] | undefined;
  Height?: number | undefined;
  Length?: number | undefined;
  Trailer?: WaypointOptimizationTrailerOptions | undefined;
  TruckType?: WaypointOptimizationTruckType | undefined;
  TunnelRestrictionCode?: string | undefined;
  WeightPerAxle?: number | undefined;
  Width?: number | undefined;
}
export interface WaypointOptimizationTravelModeOptions {
  Pedestrian?: WaypointOptimizationPedestrianOptions | undefined;
  Truck?: WaypointOptimizationTruckOptions | undefined;
}
export interface WaypointOptimizationWaypoint {
  AccessHours?: WaypointOptimizationAccessHours | undefined;
  AppointmentTime?: string | undefined;
  Before?: number[] | undefined;
  Heading?: number | undefined;
  Id?: string | undefined;
  Position: number[] | undefined;
  ServiceDuration?: number | undefined;
  SideOfStreet?: WaypointOptimizationSideOfStreetOptions | undefined;
}
export interface OptimizeWaypointsRequest {
  Avoid?: WaypointOptimizationAvoidanceOptions | undefined;
  Clustering?: WaypointOptimizationClusteringOptions | undefined;
  DepartureTime?: string | undefined;
  Destination?: number[] | undefined;
  DestinationOptions?: WaypointOptimizationDestinationOptions | undefined;
  Driver?: WaypointOptimizationDriverOptions | undefined;
  Exclude?: WaypointOptimizationExclusionOptions | undefined;
  Key?: string | undefined;
  OptimizeSequencingFor?: WaypointOptimizationSequencingObjective | undefined;
  Origin: number[] | undefined;
  OriginOptions?: WaypointOptimizationOriginOptions | undefined;
  Traffic?: WaypointOptimizationTrafficOptions | undefined;
  TravelMode?: WaypointOptimizationTravelMode | undefined;
  TravelModeOptions?: WaypointOptimizationTravelModeOptions | undefined;
  Waypoints?: WaypointOptimizationWaypoint[] | undefined;
}
export interface WaypointOptimizationConnection {
  Distance: number | undefined;
  From: string | undefined;
  RestDuration: number | undefined;
  To: string | undefined;
  TravelDuration: number | undefined;
  WaitDuration: number | undefined;
}
export declare const WaypointOptimizationConstraint: {
  readonly ACCESS_HOURS: "AccessHours";
  readonly APPOINTMENT_TIME: "AppointmentTime";
  readonly BEFORE: "Before";
  readonly HEADING: "Heading";
  readonly SERVICE_DURATION: "ServiceDuration";
  readonly SIDE_OF_STREET: "SideOfStreet";
};
export type WaypointOptimizationConstraint =
  (typeof WaypointOptimizationConstraint)[keyof typeof WaypointOptimizationConstraint];
export interface WaypointOptimizationFailedConstraint {
  Constraint?: WaypointOptimizationConstraint | undefined;
  Reason?: string | undefined;
}
export interface WaypointOptimizationImpedingWaypoint {
  FailedConstraints: WaypointOptimizationFailedConstraint[] | undefined;
  Id: string | undefined;
  Position: number[] | undefined;
}
export interface WaypointOptimizationOptimizedWaypoint {
  ArrivalTime?: string | undefined;
  ClusterIndex?: number | undefined;
  DepartureTime: string | undefined;
  Id: string | undefined;
  Position: number[] | undefined;
}
export interface WaypointOptimizationTimeBreakdown {
  RestDuration: number | undefined;
  ServiceDuration: number | undefined;
  TravelDuration: number | undefined;
  WaitDuration: number | undefined;
}
export interface OptimizeWaypointsResponse {
  Connections: WaypointOptimizationConnection[] | undefined;
  Distance: number | undefined;
  Duration: number | undefined;
  ImpedingWaypoints: WaypointOptimizationImpedingWaypoint[] | undefined;
  OptimizedWaypoints: WaypointOptimizationOptimizedWaypoint[] | undefined;
  PricingBucket: string | undefined;
  TimeBreakdown: WaypointOptimizationTimeBreakdown | undefined;
}
export interface RoadSnapTracePoint {
  Heading?: number | undefined;
  Position: number[] | undefined;
  Speed?: number | undefined;
  Timestamp?: string | undefined;
}
export declare const RoadSnapTravelMode: {
  readonly CAR: "Car";
  readonly PEDESTRIAN: "Pedestrian";
  readonly SCOOTER: "Scooter";
  readonly TRUCK: "Truck";
};
export type RoadSnapTravelMode =
  (typeof RoadSnapTravelMode)[keyof typeof RoadSnapTravelMode];
export declare const RoadSnapHazardousCargoType: {
  readonly COMBUSTIBLE: "Combustible";
  readonly CORROSIVE: "Corrosive";
  readonly EXPLOSIVE: "Explosive";
  readonly FLAMMABLE: "Flammable";
  readonly GAS: "Gas";
  readonly HARMFUL_TO_WATER: "HarmfulToWater";
  readonly ORGANIC: "Organic";
  readonly OTHER: "Other";
  readonly POISON: "Poison";
  readonly POISONOUS_INHALATION: "PoisonousInhalation";
  readonly RADIOACTIVE: "Radioactive";
};
export type RoadSnapHazardousCargoType =
  (typeof RoadSnapHazardousCargoType)[keyof typeof RoadSnapHazardousCargoType];
export interface RoadSnapTrailerOptions {
  TrailerCount?: number | undefined;
}
export interface RoadSnapTruckOptions {
  GrossWeight?: number | undefined;
  HazardousCargos?: RoadSnapHazardousCargoType[] | undefined;
  Height?: number | undefined;
  Length?: number | undefined;
  Trailer?: RoadSnapTrailerOptions | undefined;
  TunnelRestrictionCode?: string | undefined;
  Width?: number | undefined;
}
export interface RoadSnapTravelModeOptions {
  Truck?: RoadSnapTruckOptions | undefined;
}
export interface SnapToRoadsRequest {
  Key?: string | undefined;
  SnappedGeometryFormat?: GeometryFormat | undefined;
  SnapRadius?: number | undefined;
  TracePoints: RoadSnapTracePoint[] | undefined;
  TravelMode?: RoadSnapTravelMode | undefined;
  TravelModeOptions?: RoadSnapTravelModeOptions | undefined;
}
export declare const RoadSnapNoticeCode: {
  readonly TRACE_POINTS_HEADING_IGNORED: "TracePointsHeadingIgnored";
  readonly TRACE_POINTS_IGNORED: "TracePointsIgnored";
  readonly TRACE_POINTS_MOVED_BY_LARGE_DISTANCE: "TracePointsMovedByLargeDistance";
  readonly TRACE_POINTS_NOT_MATCHED: "TracePointsNotMatched";
  readonly TRACE_POINTS_OUT_OF_SEQUENCE: "TracePointsOutOfSequence";
  readonly TRACE_POINTS_SPEED_ESTIMATED: "TracePointsSpeedEstimated";
  readonly TRACE_POINTS_SPEED_IGNORED: "TracePointsSpeedIgnored";
};
export type RoadSnapNoticeCode =
  (typeof RoadSnapNoticeCode)[keyof typeof RoadSnapNoticeCode];
export interface RoadSnapNotice {
  Code: RoadSnapNoticeCode | undefined;
  Title: string | undefined;
  TracePointIndexes: number[] | undefined;
}
export interface RoadSnapSnappedGeometry {
  LineString?: number[][] | undefined;
  Polyline?: string | undefined;
}
export interface RoadSnapSnappedTracePoint {
  Confidence: number | undefined;
  OriginalPosition: number[] | undefined;
  SnappedPosition: number[] | undefined;
}
export interface SnapToRoadsResponse {
  Notices: RoadSnapNotice[] | undefined;
  PricingBucket: string | undefined;
  SnappedGeometry?: RoadSnapSnappedGeometry | undefined;
  SnappedGeometryFormat: GeometryFormat | undefined;
  SnappedTracePoints: RoadSnapSnappedTracePoint[] | undefined;
}
export declare const CorridorFilterSensitiveLog: (obj: Corridor) => any;
export declare const PolylineCorridorFilterSensitiveLog: (
  obj: PolylineCorridor
) => any;
export declare const IsolineAvoidanceAreaGeometryFilterSensitiveLog: (
  obj: IsolineAvoidanceAreaGeometry
) => any;
export declare const IsolineAvoidanceAreaFilterSensitiveLog: (
  obj: IsolineAvoidanceArea
) => any;
export declare const IsolineAvoidanceOptionsFilterSensitiveLog: (
  obj: IsolineAvoidanceOptions
) => any;
export declare const IsolineMatchingOptionsFilterSensitiveLog: (
  obj: IsolineMatchingOptions
) => any;
export declare const IsolineSideOfStreetOptionsFilterSensitiveLog: (
  obj: IsolineSideOfStreetOptions
) => any;
export declare const IsolineDestinationOptionsFilterSensitiveLog: (
  obj: IsolineDestinationOptions
) => any;
export declare const IsolineOriginOptionsFilterSensitiveLog: (
  obj: IsolineOriginOptions
) => any;
export declare const CalculateIsolinesRequestFilterSensitiveLog: (
  obj: CalculateIsolinesRequest
) => any;
export declare const IsolineConnectionGeometryFilterSensitiveLog: (
  obj: IsolineConnectionGeometry
) => any;
export declare const IsolineConnectionFilterSensitiveLog: (
  obj: IsolineConnection
) => any;
export declare const IsolineShapeGeometryFilterSensitiveLog: (
  obj: IsolineShapeGeometry
) => any;
export declare const IsolineFilterSensitiveLog: (obj: Isoline) => any;
export declare const CalculateIsolinesResponseFilterSensitiveLog: (
  obj: CalculateIsolinesResponse
) => any;
export declare const RouteMatrixAvoidanceAreaGeometryFilterSensitiveLog: (
  obj: RouteMatrixAvoidanceAreaGeometry
) => any;
export declare const RouteMatrixAvoidanceAreaFilterSensitiveLog: (
  obj: RouteMatrixAvoidanceArea
) => any;
export declare const RouteMatrixAvoidanceOptionsFilterSensitiveLog: (
  obj: RouteMatrixAvoidanceOptions
) => any;
export declare const RouteMatrixMatchingOptionsFilterSensitiveLog: (
  obj: RouteMatrixMatchingOptions
) => any;
export declare const RouteMatrixSideOfStreetOptionsFilterSensitiveLog: (
  obj: RouteMatrixSideOfStreetOptions
) => any;
export declare const RouteMatrixDestinationOptionsFilterSensitiveLog: (
  obj: RouteMatrixDestinationOptions
) => any;
export declare const RouteMatrixDestinationFilterSensitiveLog: (
  obj: RouteMatrixDestination
) => any;
export declare const RouteMatrixOriginOptionsFilterSensitiveLog: (
  obj: RouteMatrixOriginOptions
) => any;
export declare const RouteMatrixOriginFilterSensitiveLog: (
  obj: RouteMatrixOrigin
) => any;
export declare const CircleFilterSensitiveLog: (obj: Circle) => any;
export declare const RouteMatrixBoundaryGeometryFilterSensitiveLog: (
  obj: RouteMatrixBoundaryGeometry
) => any;
export declare const RouteMatrixBoundaryFilterSensitiveLog: (
  obj: RouteMatrixBoundary
) => any;
export declare const CalculateRouteMatrixRequestFilterSensitiveLog: (
  obj: CalculateRouteMatrixRequest
) => any;
export declare const CalculateRouteMatrixResponseFilterSensitiveLog: (
  obj: CalculateRouteMatrixResponse
) => any;
export declare const RouteAvoidanceAreaGeometryFilterSensitiveLog: (
  obj: RouteAvoidanceAreaGeometry
) => any;
export declare const RouteAvoidanceAreaFilterSensitiveLog: (
  obj: RouteAvoidanceArea
) => any;
export declare const RouteAvoidanceOptionsFilterSensitiveLog: (
  obj: RouteAvoidanceOptions
) => any;
export declare const RouteMatchingOptionsFilterSensitiveLog: (
  obj: RouteMatchingOptions
) => any;
export declare const RouteSideOfStreetOptionsFilterSensitiveLog: (
  obj: RouteSideOfStreetOptions
) => any;
export declare const RouteDestinationOptionsFilterSensitiveLog: (
  obj: RouteDestinationOptions
) => any;
export declare const RouteOriginOptionsFilterSensitiveLog: (
  obj: RouteOriginOptions
) => any;
export declare const RouteWaypointFilterSensitiveLog: (
  obj: RouteWaypoint
) => any;
export declare const CalculateRoutesRequestFilterSensitiveLog: (
  obj: CalculateRoutesRequest
) => any;
export declare const RouteFerryPlaceFilterSensitiveLog: (
  obj: RouteFerryPlace
) => any;
export declare const RouteFerryArrivalFilterSensitiveLog: (
  obj: RouteFerryArrival
) => any;
export declare const RouteFerryDepartureFilterSensitiveLog: (
  obj: RouteFerryDeparture
) => any;
export declare const RoutePassThroughPlaceFilterSensitiveLog: (
  obj: RoutePassThroughPlace
) => any;
export declare const RoutePassThroughWaypointFilterSensitiveLog: (
  obj: RoutePassThroughWaypoint
) => any;
export declare const RouteFerryLegDetailsFilterSensitiveLog: (
  obj: RouteFerryLegDetails
) => any;
export declare const RouteLegGeometryFilterSensitiveLog: (
  obj: RouteLegGeometry
) => any;
export declare const RoutePedestrianPlaceFilterSensitiveLog: (
  obj: RoutePedestrianPlace
) => any;
export declare const RoutePedestrianArrivalFilterSensitiveLog: (
  obj: RoutePedestrianArrival
) => any;
export declare const RoutePedestrianDepartureFilterSensitiveLog: (
  obj: RoutePedestrianDeparture
) => any;
export declare const RoutePedestrianLegDetailsFilterSensitiveLog: (
  obj: RoutePedestrianLegDetails
) => any;
export declare const RouteVehiclePlaceFilterSensitiveLog: (
  obj: RouteVehiclePlace
) => any;
export declare const RouteVehicleArrivalFilterSensitiveLog: (
  obj: RouteVehicleArrival
) => any;
export declare const RouteVehicleDepartureFilterSensitiveLog: (
  obj: RouteVehicleDeparture
) => any;
export declare const RouteTollPaymentSiteFilterSensitiveLog: (
  obj: RouteTollPaymentSite
) => any;
export declare const RouteTollFilterSensitiveLog: (obj: RouteToll) => any;
export declare const RouteVehicleLegDetailsFilterSensitiveLog: (
  obj: RouteVehicleLegDetails
) => any;
export declare const RouteLegFilterSensitiveLog: (obj: RouteLeg) => any;
export declare const RouteFilterSensitiveLog: (obj: Route) => any;
export declare const CalculateRoutesResponseFilterSensitiveLog: (
  obj: CalculateRoutesResponse
) => any;
export declare const WaypointOptimizationAvoidanceAreaGeometryFilterSensitiveLog: (
  obj: WaypointOptimizationAvoidanceAreaGeometry
) => any;
export declare const WaypointOptimizationAvoidanceAreaFilterSensitiveLog: (
  obj: WaypointOptimizationAvoidanceArea
) => any;
export declare const WaypointOptimizationAvoidanceOptionsFilterSensitiveLog: (
  obj: WaypointOptimizationAvoidanceOptions
) => any;
export declare const WaypointOptimizationSideOfStreetOptionsFilterSensitiveLog: (
  obj: WaypointOptimizationSideOfStreetOptions
) => any;
export declare const WaypointOptimizationDestinationOptionsFilterSensitiveLog: (
  obj: WaypointOptimizationDestinationOptions
) => any;
export declare const WaypointOptimizationWaypointFilterSensitiveLog: (
  obj: WaypointOptimizationWaypoint
) => any;
export declare const OptimizeWaypointsRequestFilterSensitiveLog: (
  obj: OptimizeWaypointsRequest
) => any;
export declare const WaypointOptimizationImpedingWaypointFilterSensitiveLog: (
  obj: WaypointOptimizationImpedingWaypoint
) => any;
export declare const WaypointOptimizationOptimizedWaypointFilterSensitiveLog: (
  obj: WaypointOptimizationOptimizedWaypoint
) => any;
export declare const OptimizeWaypointsResponseFilterSensitiveLog: (
  obj: OptimizeWaypointsResponse
) => any;
export declare const RoadSnapTracePointFilterSensitiveLog: (
  obj: RoadSnapTracePoint
) => any;
export declare const SnapToRoadsRequestFilterSensitiveLog: (
  obj: SnapToRoadsRequest
) => any;
export declare const RoadSnapSnappedGeometryFilterSensitiveLog: (
  obj: RoadSnapSnappedGeometry
) => any;
export declare const RoadSnapSnappedTracePointFilterSensitiveLog: (
  obj: RoadSnapSnappedTracePoint
) => any;
export declare const SnapToRoadsResponseFilterSensitiveLog: (
  obj: SnapToRoadsResponse
) => any;
