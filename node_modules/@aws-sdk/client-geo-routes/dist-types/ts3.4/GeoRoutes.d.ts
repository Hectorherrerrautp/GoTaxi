import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  CalculateIsolinesCommandInput,
  CalculateIsolinesCommandOutput,
} from "./commands/CalculateIsolinesCommand";
import {
  CalculateRouteMatrixCommandInput,
  CalculateRouteMatrixCommandOutput,
} from "./commands/CalculateRouteMatrixCommand";
import {
  CalculateRoutesCommandInput,
  CalculateRoutesCommandOutput,
} from "./commands/CalculateRoutesCommand";
import {
  OptimizeWaypointsCommandInput,
  OptimizeWaypointsCommandOutput,
} from "./commands/OptimizeWaypointsCommand";
import {
  SnapToRoadsCommandInput,
  SnapToRoadsCommandOutput,
} from "./commands/SnapToRoadsCommand";
import { GeoRoutesClient } from "./GeoRoutesClient";
export interface GeoRoutes {
  calculateIsolines(
    args: CalculateIsolinesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CalculateIsolinesCommandOutput>;
  calculateIsolines(
    args: CalculateIsolinesCommandInput,
    cb: (err: any, data?: CalculateIsolinesCommandOutput) => void
  ): void;
  calculateIsolines(
    args: CalculateIsolinesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CalculateIsolinesCommandOutput) => void
  ): void;
  calculateRouteMatrix(
    args: CalculateRouteMatrixCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CalculateRouteMatrixCommandOutput>;
  calculateRouteMatrix(
    args: CalculateRouteMatrixCommandInput,
    cb: (err: any, data?: CalculateRouteMatrixCommandOutput) => void
  ): void;
  calculateRouteMatrix(
    args: CalculateRouteMatrixCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CalculateRouteMatrixCommandOutput) => void
  ): void;
  calculateRoutes(
    args: CalculateRoutesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CalculateRoutesCommandOutput>;
  calculateRoutes(
    args: CalculateRoutesCommandInput,
    cb: (err: any, data?: CalculateRoutesCommandOutput) => void
  ): void;
  calculateRoutes(
    args: CalculateRoutesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CalculateRoutesCommandOutput) => void
  ): void;
  optimizeWaypoints(
    args: OptimizeWaypointsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<OptimizeWaypointsCommandOutput>;
  optimizeWaypoints(
    args: OptimizeWaypointsCommandInput,
    cb: (err: any, data?: OptimizeWaypointsCommandOutput) => void
  ): void;
  optimizeWaypoints(
    args: OptimizeWaypointsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: OptimizeWaypointsCommandOutput) => void
  ): void;
  snapToRoads(
    args: SnapToRoadsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SnapToRoadsCommandOutput>;
  snapToRoads(
    args: SnapToRoadsCommandInput,
    cb: (err: any, data?: SnapToRoadsCommandOutput) => void
  ): void;
  snapToRoads(
    args: SnapToRoadsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SnapToRoadsCommandOutput) => void
  ): void;
}
export declare class GeoRoutes extends GeoRoutesClient implements GeoRoutes {}
