import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { GeoPlacesServiceException as __BaseException } from "../models/GeoPlacesServiceException";
import { AccessDeniedException, InternalServerException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AutocompleteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/autocomplete");
    const query = map({
        [_k]: [, input[_K]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AdditionalFeatures: (_) => _json(_),
        BiasPosition: (_) => se_Position(_, context),
        Filter: (_) => se_AutocompleteFilter(_, context),
        IntendedUse: [],
        Language: [],
        MaxResults: [],
        PoliticalView: [],
        PostalCodeMode: [],
        QueryText: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_GeocodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/geocode");
    const query = map({
        [_k]: [, input[_K]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AdditionalFeatures: (_) => _json(_),
        BiasPosition: (_) => se_Position(_, context),
        Filter: (_) => _json(_),
        IntendedUse: [],
        Language: [],
        MaxResults: [],
        PoliticalView: [],
        QueryComponents: (_) => _json(_),
        QueryText: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetPlaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/place/{PlaceId}");
    b.p("PlaceId", () => input.PlaceId, "{PlaceId}", false);
    const query = map({
        [_af]: [() => input.AdditionalFeatures !== void 0, () => input[_AF] || []],
        [_l]: [, input[_L]],
        [_pv]: [, input[_PV]],
        [_iu]: [, input[_IU]],
        [_k]: [, input[_K]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ReverseGeocodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reverse-geocode");
    const query = map({
        [_k]: [, input[_K]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AdditionalFeatures: (_) => _json(_),
        Filter: (_) => _json(_),
        IntendedUse: [],
        Language: [],
        MaxResults: [],
        PoliticalView: [],
        QueryPosition: (_) => se_Position(_, context),
        QueryRadius: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_SearchNearbyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-nearby");
    const query = map({
        [_k]: [, input[_K]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AdditionalFeatures: (_) => _json(_),
        Filter: (_) => se_SearchNearbyFilter(_, context),
        IntendedUse: [],
        Language: [],
        MaxResults: [],
        NextToken: [],
        PoliticalView: [],
        QueryPosition: (_) => se_Position(_, context),
        QueryRadius: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_SearchTextCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-text");
    const query = map({
        [_k]: [, input[_K]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AdditionalFeatures: (_) => _json(_),
        BiasPosition: (_) => se_Position(_, context),
        Filter: (_) => se_SearchTextFilter(_, context),
        IntendedUse: [],
        Language: [],
        MaxResults: [],
        NextToken: [],
        PoliticalView: [],
        QueryId: [],
        QueryText: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_SuggestCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/suggest");
    const query = map({
        [_k]: [, input[_K]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AdditionalFeatures: (_) => _json(_),
        BiasPosition: (_) => se_Position(_, context),
        Filter: (_) => se_SuggestFilter(_, context),
        IntendedUse: [],
        Language: [],
        MaxQueryRefinements: [],
        MaxResults: [],
        PoliticalView: [],
        QueryText: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const de_AutocompleteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ResultItems: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GeocodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ResultItems: (_) => de_GeocodeResultItemList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPlaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        AccessRestrictions: _json,
        Address: _json,
        AddressNumberCorrected: __expectBoolean,
        BusinessChains: _json,
        Categories: _json,
        Contacts: _json,
        FoodTypes: _json,
        MainAddress: (_) => de_RelatedPlace(_, context),
        MapView: (_) => de_BoundingBox(_, context),
        OpeningHours: _json,
        Phonemes: _json,
        PlaceId: __expectString,
        PlaceType: __expectString,
        PoliticalView: __expectString,
        Position: (_) => de_Position(_, context),
        PostalCodeDetails: _json,
        SecondaryAddresses: (_) => de_RelatedPlaceList(_, context),
        TimeZone: _json,
        Title: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ReverseGeocodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ResultItems: (_) => de_ReverseGeocodeResultItemList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchNearbyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ResultItems: (_) => de_SearchNearbyResultItemList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchTextCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ResultItems: (_) => de_SearchTextResultItemList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SuggestCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_PB]: [, output.headers[_xagpb]],
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        QueryRefinements: _json,
        ResultItems: (_) => de_SuggestResultItemList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.geoplaces#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.geoplaces#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.geoplaces#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.geoplaces#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        FieldList: [, (_) => de_ValidationExceptionFieldList(_, context), `fieldList`],
        Message: [, __expectString, `message`],
        Reason: [, __expectString, `reason`],
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AutocompleteFilter = (input, context) => {
    return take(input, {
        BoundingBox: (_) => se_BoundingBox(_, context),
        Circle: (_) => se_FilterCircle(_, context),
        IncludeCountries: _json,
        IncludePlaceTypes: _json,
    });
};
const se_BoundingBox = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se_FilterCircle = (input, context) => {
    return take(input, {
        Center: (_) => se_Position(_, context),
        Radius: [],
    });
};
const se_Position = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se_SearchNearbyFilter = (input, context) => {
    return take(input, {
        BoundingBox: (_) => se_BoundingBox(_, context),
        ExcludeBusinessChains: _json,
        ExcludeCategories: _json,
        ExcludeFoodTypes: _json,
        IncludeBusinessChains: _json,
        IncludeCategories: _json,
        IncludeCountries: _json,
        IncludeFoodTypes: _json,
    });
};
const se_SearchTextFilter = (input, context) => {
    return take(input, {
        BoundingBox: (_) => se_BoundingBox(_, context),
        Circle: (_) => se_FilterCircle(_, context),
        IncludeCountries: _json,
    });
};
const se_SuggestFilter = (input, context) => {
    return take(input, {
        BoundingBox: (_) => se_BoundingBox(_, context),
        Circle: (_) => se_FilterCircle(_, context),
        IncludeCountries: _json,
    });
};
const de_AccessPoint = (output, context) => {
    return take(output, {
        Position: (_) => de_Position(_, context),
    });
};
const de_AccessPointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessPoint(entry, context);
    });
    return retVal;
};
const de_AddressComponentMatchScores = (output, context) => {
    return take(output, {
        AddressNumber: __limitedParseDouble,
        Block: __limitedParseDouble,
        Building: __limitedParseDouble,
        Country: __limitedParseDouble,
        District: __limitedParseDouble,
        Intersection: (_) => de_MatchScoreList(_, context),
        Locality: __limitedParseDouble,
        PostalCode: __limitedParseDouble,
        Region: __limitedParseDouble,
        SecondaryAddressComponents: (_) => de_SecondaryAddressComponentMatchScoreList(_, context),
        SubBlock: __limitedParseDouble,
        SubDistrict: __limitedParseDouble,
        SubRegion: __limitedParseDouble,
    });
};
const de_BoundingBox = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_ComponentMatchScores = (output, context) => {
    return take(output, {
        Address: (_) => de_AddressComponentMatchScores(_, context),
        Title: __limitedParseDouble,
    });
};
const de_GeocodeResultItem = (output, context) => {
    return take(output, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        Address: _json,
        AddressNumberCorrected: __expectBoolean,
        Categories: _json,
        Distance: __expectLong,
        FoodTypes: _json,
        Intersections: (_) => de_IntersectionList(_, context),
        MainAddress: (_) => de_RelatedPlace(_, context),
        MapView: (_) => de_BoundingBox(_, context),
        MatchScores: (_) => de_MatchScoreDetails(_, context),
        ParsedQuery: _json,
        PlaceId: __expectString,
        PlaceType: __expectString,
        PoliticalView: __expectString,
        Position: (_) => de_Position(_, context),
        PostalCodeDetails: _json,
        SecondaryAddresses: (_) => de_RelatedPlaceList(_, context),
        TimeZone: _json,
        Title: __expectString,
    });
};
const de_GeocodeResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GeocodeResultItem(entry, context);
    });
    return retVal;
};
const de_Intersection = (output, context) => {
    return take(output, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        Address: _json,
        Distance: __expectLong,
        MapView: (_) => de_BoundingBox(_, context),
        PlaceId: __expectString,
        Position: (_) => de_Position(_, context),
        RouteDistance: __expectLong,
        Title: __expectString,
    });
};
const de_IntersectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Intersection(entry, context);
    });
    return retVal;
};
const de_MatchScoreDetails = (output, context) => {
    return take(output, {
        Components: (_) => de_ComponentMatchScores(_, context),
        Overall: __limitedParseDouble,
    });
};
const de_MatchScoreList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_Position = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_RelatedPlace = (output, context) => {
    return take(output, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        Address: _json,
        PlaceId: __expectString,
        PlaceType: __expectString,
        Position: (_) => de_Position(_, context),
        Title: __expectString,
    });
};
const de_RelatedPlaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelatedPlace(entry, context);
    });
    return retVal;
};
const de_ReverseGeocodeResultItem = (output, context) => {
    return take(output, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        Address: _json,
        AddressNumberCorrected: __expectBoolean,
        Categories: _json,
        Distance: __expectLong,
        FoodTypes: _json,
        Intersections: (_) => de_IntersectionList(_, context),
        MapView: (_) => de_BoundingBox(_, context),
        PlaceId: __expectString,
        PlaceType: __expectString,
        PoliticalView: __expectString,
        Position: (_) => de_Position(_, context),
        PostalCodeDetails: _json,
        TimeZone: _json,
        Title: __expectString,
    });
};
const de_ReverseGeocodeResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReverseGeocodeResultItem(entry, context);
    });
    return retVal;
};
const de_SearchNearbyResultItem = (output, context) => {
    return take(output, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        AccessRestrictions: _json,
        Address: _json,
        AddressNumberCorrected: __expectBoolean,
        BusinessChains: _json,
        Categories: _json,
        Contacts: _json,
        Distance: __expectLong,
        FoodTypes: _json,
        MapView: (_) => de_BoundingBox(_, context),
        OpeningHours: _json,
        Phonemes: _json,
        PlaceId: __expectString,
        PlaceType: __expectString,
        PoliticalView: __expectString,
        Position: (_) => de_Position(_, context),
        TimeZone: _json,
        Title: __expectString,
    });
};
const de_SearchNearbyResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SearchNearbyResultItem(entry, context);
    });
    return retVal;
};
const de_SearchTextResultItem = (output, context) => {
    return take(output, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        AccessRestrictions: _json,
        Address: _json,
        AddressNumberCorrected: __expectBoolean,
        BusinessChains: _json,
        Categories: _json,
        Contacts: _json,
        Distance: __expectLong,
        FoodTypes: _json,
        MapView: (_) => de_BoundingBox(_, context),
        OpeningHours: _json,
        Phonemes: _json,
        PlaceId: __expectString,
        PlaceType: __expectString,
        PoliticalView: __expectString,
        Position: (_) => de_Position(_, context),
        TimeZone: _json,
        Title: __expectString,
    });
};
const de_SearchTextResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SearchTextResultItem(entry, context);
    });
    return retVal;
};
const de_SecondaryAddressComponentMatchScore = (output, context) => {
    return take(output, {
        Number: __limitedParseDouble,
    });
};
const de_SecondaryAddressComponentMatchScoreList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecondaryAddressComponentMatchScore(entry, context);
    });
    return retVal;
};
const de_SuggestPlaceResult = (output, context) => {
    return take(output, {
        AccessPoints: (_) => de_AccessPointList(_, context),
        AccessRestrictions: _json,
        Address: _json,
        BusinessChains: _json,
        Categories: _json,
        Distance: __expectLong,
        FoodTypes: _json,
        MapView: (_) => de_BoundingBox(_, context),
        Phonemes: _json,
        PlaceId: __expectString,
        PlaceType: __expectString,
        PoliticalView: __expectString,
        Position: (_) => de_Position(_, context),
        TimeZone: _json,
    });
};
const de_SuggestResultItem = (output, context) => {
    return take(output, {
        Highlights: _json,
        Place: (_) => de_SuggestPlaceResult(_, context),
        Query: _json,
        SuggestResultItemType: __expectString,
        Title: __expectString,
    });
};
const de_SuggestResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SuggestResultItem(entry, context);
    });
    return retVal;
};
const de_ValidationExceptionField = (output, context) => {
    return take(output, {
        Message: [, __expectString, `message`],
        Name: [, __expectString, `name`],
    });
};
const de_ValidationExceptionFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationExceptionField(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _AF = "AdditionalFeatures";
const _IU = "IntendedUse";
const _K = "Key";
const _L = "Language";
const _PB = "PricingBucket";
const _PV = "PoliticalView";
const _af = "additional-features";
const _iu = "intended-use";
const _k = "key";
const _l = "language";
const _pv = "political-view";
const _xagpb = "x-amz-geo-pricing-bucket";
